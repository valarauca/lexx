var searchIndex = {};
searchIndex["lexx"] = {"doc":"Rust Lex","items":[[3,"IOErr","lexx","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits.",null,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it\nparses the arguments to the invocation as a token-tree. This is a very\nloose structure, such that all sorts of different AST-fragments can\nbe passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",0,null],[13,"Delimited","","A delimited sequence of token trees",0,null],[13,"Sequence","","A kleene-style repetition sequence with a span",0,null],[3,"Delimited","","A delimited sequence of token trees",null,null],[12,"delim","","The type of delimiter",1,null],[12,"open_span","","The span covering the opening delimiter",1,null],[12,"tts","","The delimited sequence of token trees",1,null],[12,"close_span","","The span covering the closing delimiter",1,null],[3,"SequenceRepetition","","A sequence of token trees",null,null],[12,"tts","","The sequence of token trees",2,null],[12,"separator","","The optional separator",2,null],[12,"op","","Whether the sequence can be repeated zero (*), or one or more times (+)",2,null],[12,"num_captures","","The number of `MatchNt`s that appear in the sequence (and subsequences)",2,null],[4,"Token","","",null,null],[13,"Eq","","",3,null],[13,"Lt","","",3,null],[13,"Le","","",3,null],[13,"EqEq","","",3,null],[13,"Ne","","",3,null],[13,"Ge","","",3,null],[13,"Gt","","",3,null],[13,"AndAnd","","",3,null],[13,"OrOr","","",3,null],[13,"Not","","",3,null],[13,"Tilde","","",3,null],[13,"BinOp","","",3,null],[13,"BinOpEq","","",3,null],[13,"At","","",3,null],[13,"Dot","","",3,null],[13,"DotDot","","",3,null],[13,"DotDotDot","","",3,null],[13,"Comma","","",3,null],[13,"Semi","","",3,null],[13,"Colon","","",3,null],[13,"ModSep","","",3,null],[13,"RArrow","","",3,null],[13,"LArrow","","",3,null],[13,"FatArrow","","",3,null],[13,"Pound","","",3,null],[13,"Dollar","","",3,null],[13,"Question","","",3,null],[13,"OpenDelim","","An opening delimiter, eg. `{`",3,null],[13,"CloseDelim","","A closing delimiter, eg. `}`",3,null],[13,"Literal","","",3,null],[13,"Ident","","",3,null],[13,"Underscore","","",3,null],[13,"Lifetime","","",3,null],[13,"Interpolated","","",3,null],[13,"DocComment","","Doc comment",3,null],[13,"MatchNt","","Parse a nonterminal (name to bind, name of NT)",3,null],[13,"SubstNt","","A syntactic variable that will be filled in by macro expansion.",3,null],[13,"Whitespace","","Whitespace",3,null],[13,"Comment","","Comment",3,null],[13,"Shebang","","",3,null],[13,"Eof","","",3,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",4,null],[13,"Bracket","","A square bracket: `[` or `]`",4,null],[13,"Brace","","A curly brace: `{` or `}`",4,null],[13,"NoDelim","","An empty delimiter",4,null],[3,"DiagnosticBuilder","","Used for emitting structured error messages and other diagnostic information.",null,null],[12,"level","","",5,null],[12,"message","","",5,null],[12,"code","","",5,null],[12,"span","","",5,null],[12,"children","","",5,null],[3,"Parser","","Parser type",null,null],[4,"Fault","","Error Wrapper",null,null],[13,"FileOpen","","",6,null],[13,"FileMeta","","",6,null],[13,"FileRead","","",6,null],[13,"SyntexErr","","",6,null],[5,"sr","","For deconstructor a branch of TokenTree into a usable type",null,{"inputs":[{"name":"sequencerepetition"}],"output":{"name":"intoiter"}}],[5,"dr","","For deconstructor a branch of TokenTree into a usable type",null,{"inputs":[{"name":"delimited"}],"output":{"name":"intoiter"}}],[5,"tt","","For dispatching to dr/sr for deconstructing TokenTrees",null,{"inputs":[{"name":"tokentree"}],"output":{"name":"intoiter"}}],[5,"flatten_token_tree","","Flatten TokenTree",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"new","","Construct a new parser.",7,{"inputs":[],"output":{"name":"parser"}}],[11,"get_tokens","","Get a vector of all tokens, or get an error. Loads a file",7,null],[11,"get_tokentree","","Get the token tree, or get an error. Loads a file",7,null],[11,"get_tokens_local","","Get a flat list of tokens, while using pre-loaded code. Does not file IO",7,null],[11,"get_tokenstree_local","","Get token tree, while using pre-loaded code. Does not file IO",7,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",8,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",8,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",8,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",8,null],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",8,null],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",8,null],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",8,null],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",8,null],[11,"from","","",8,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"from","","",8,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[11,"cause","","",8,null],[11,"len","","",0,null],[11,"get_tt","","",0,null],[11,"get_span","","Returns the `Span` corresponding to this token tree.",0,null],[11,"parse","","Use this token tree as a matcher to parse given tts.",0,null],[11,"eq_unspanned","","Check if this TokenTree is equal to the other, regardless of span information.",0,null],[11,"span","","Retrieve the TokenTree&#39;s span.",0,null],[11,"eq_token","","Indicates if the stream is a token that is equal to the provided token.",0,null],[11,"is_ident","","Indicates if the token is an identifier.",0,null],[11,"maybe_ident","","Returns an identifier.",0,null],[11,"maybe_lit","","Returns a Token literal.",0,null],[11,"maybe_str","","Returns an AST string literal.",0,null],[11,"fmt","","",4,null],[11,"hash","","",4,null],[11,"eq","","",4,null],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",3,null],[11,"hash","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,null],[11,"clone","","",3,null],[11,"is_like_gt","","Returns `true` if the token starts with &#39;&gt;&#39;.",3,null],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",3,null],[11,"is_lit","","Returns `true` if the token is any literal",3,null],[11,"is_ident","","Returns `true` if the token is an identifier.",3,null],[11,"is_doc_comment","","Returns `true` if the token is a documentation comment.",3,null],[11,"is_interpolated","","Returns `true` if the token is interpolated.",3,null],[11,"is_path","","Returns `true` if the token is an interpolated path.",3,null],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",3,null],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",3,null],[11,"is_path_start","","",3,null],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",3,null],[11,"is_path_segment_keyword","","",3,null],[11,"is_any_keyword","","Returns `true` if the token is either a strict or reserved keyword.",3,null],[11,"is_strict_keyword","","Returns `true` if the token is a strict keyword.",3,null],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword reserved for possible future use.",3,null],[11,"to_tokens","","",0,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"open_token","","Returns the opening delimiter as a token.",1,null],[11,"close_token","","Returns the closing delimiter as a token.",1,null],[11,"open_tt","","Returns the opening delimiter as a token tree.",1,null],[11,"close_tt","","Returns the closing delimiter as a token tree.",1,null],[11,"subtrees","","Returns the token trees inside the delimiters.",1,null],[11,"fmt","","",2,null],[11,"hash","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"hash","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"emit","","Emit the diagnostic.",5,null],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or\ncancelled or it will panic when dropped).\nBEWARE: if this DiagnosticBuilder is an error, then creating it will\nbump the error count on the Handler and cancelling it won&#39;t undo that.\nIf you want to decrement the error count you should use `Handler::cancel`.",5,null],[11,"cancelled","","",5,null],[11,"is_fatal","","",5,null],[11,"span_label","","Add a span/label to be included in the resulting snippet.\nThis is pushed onto the `MultiSpan` that was created when the\ndiagnostic was first built. If you don&#39;t call this function at\nall, and you just supplied a `Span` to create the diagnostic,\nthen the snippet will just include that `Span`, which is\ncalled the primary span.",5,null],[11,"note_expected_found","","",5,null],[11,"note_expected_found_extra","","",5,null],[11,"note","","",5,null],[11,"span_note","","",5,null],[11,"warn","","",5,null],[11,"span_warn","","",5,null],[11,"help","","",5,null],[11,"span_help","","",5,null],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",5,null],[11,"set_span","","",5,null],[11,"code","","",5,null],[11,"message","","",5,null],[11,"level","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"drop","","",5,null]],"paths":[[4,"TokenTree"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"Token"],[4,"DelimToken"],[3,"DiagnosticBuilder"],[4,"Fault"],[3,"Parser"],[3,"IOErr"]]};
searchIndex["syntex_syntax"] = {"doc":"The Rust parser and macro expander.","items":[[0,"diagnostics","syntex_syntax","",null,null],[0,"plugin","syntex_syntax::diagnostics","",null,null],[3,"ErrorInfo","syntex_syntax::diagnostics::plugin","Error information type.",null,null],[12,"description","","",0,null],[12,"use_site","","",0,null],[5,"expand_diagnostic_used","","",null,null],[5,"expand_register_diagnostic","","",null,null],[5,"expand_build_diagnostic_array","","",null,null],[6,"ErrorMap","","Mapping from error codes to metadata.",null,null],[0,"metadata","syntex_syntax::diagnostics","This module contains utilities for outputting metadata for diagnostic errors.",null,null],[3,"ErrorMetadata","syntex_syntax::diagnostics::metadata","JSON encodable/decodable version of `ErrorInfo`.",null,null],[12,"description","","",1,null],[12,"use_site","","",1,null],[3,"ErrorLocation","","JSON encodable error location type with filename and line number.",null,null],[12,"filename","","",2,null],[12,"line","","",2,null],[5,"get_metadata_dir","","Get the directory where metadata for a given `prefix` should be stored.",null,{"inputs":[{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"output_metadata","","Write metadata for the errors in `err_map` to disk, to a file corresponding to `prefix/name`.",null,{"inputs":[{"name":"extctxt"},{"name":"str"},{"name":"str"},{"name":"errormap"}],"output":{"name":"result"}}],[6,"ErrorMetadataMap","","Mapping from error codes to metadata that can be (de)serialized.",null,null],[11,"encode","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"encode","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"from_span","","Create an error location from a span.",2,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[0,"util","syntex_syntax","",null,null],[3,"ThinVec","syntex_syntax::util","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`).\nThe `Option&lt;Box&lt;..&gt;&gt;` wrapping allows us to represent a zero sized vector with `None`,\nwhich uses only a single (null) pointer.",null,null],[0,"interner","","An &quot;interner&quot; is a data structure that associates values with usize tags and\nallows bidirectional lookup; i.e. given a value, one can easily find the\ntype, and vice versa.",null,null],[3,"Interner","syntex_syntax::util::interner","",null,null],[11,"default","","",3,{"inputs":[],"output":{"name":"interner"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"prefill","","",3,null],[11,"intern","","",3,null],[11,"gensym","","",3,null],[11,"gensym_copy","","Create a gensym with the same name as an existing entry.",3,null],[11,"get","","",3,null],[11,"find","","",3,null],[0,"lev_distance","syntex_syntax::util","",null,null],[5,"lev_distance","syntex_syntax::util::lev_distance","To find the Levenshtein distance between two strings",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"find_best_match_for_name","","To find the best match for a given string from an iterator of names\nAs a loose rule to avoid the obviously incorrect suggestions, it takes\nan optional limit for the maximum allowable edit distance, which defaults\nto one-third of the given word",null,{"inputs":[{"name":"t"},{"name":"str"},{"name":"option"}],"output":{"name":"option"}}],[0,"node_count","syntex_syntax::util","",null,null],[3,"NodeCounter","syntex_syntax::util::node_count","",null,null],[12,"count","","",4,null],[11,"new","","",4,{"inputs":[],"output":{"name":"nodecounter"}}],[11,"visit_ident","","",4,null],[11,"visit_mod","","",4,null],[11,"visit_foreign_item","","",4,null],[11,"visit_item","","",4,null],[11,"visit_local","","",4,null],[11,"visit_block","","",4,null],[11,"visit_stmt","","",4,null],[11,"visit_arm","","",4,null],[11,"visit_pat","","",4,null],[11,"visit_expr","","",4,null],[11,"visit_ty","","",4,null],[11,"visit_generics","","",4,null],[11,"visit_fn","","",4,null],[11,"visit_trait_item","","",4,null],[11,"visit_impl_item","","",4,null],[11,"visit_trait_ref","","",4,null],[11,"visit_ty_param_bound","","",4,null],[11,"visit_poly_trait_ref","","",4,null],[11,"visit_variant_data","","",4,null],[11,"visit_struct_field","","",4,null],[11,"visit_enum_def","","",4,null],[11,"visit_variant","","",4,null],[11,"visit_lifetime","","",4,null],[11,"visit_lifetime_def","","",4,null],[11,"visit_mac","","",4,null],[11,"visit_path","","",4,null],[11,"visit_path_list_item","","",4,null],[11,"visit_path_parameters","","",4,null],[11,"visit_assoc_type_binding","","",4,null],[11,"visit_attribute","","",4,null],[11,"visit_macro_def","","",4,null],[0,"parser","syntex_syntax::util","",null,null],[4,"AssocOp","syntex_syntax::util::parser","Associative operator with precedence.",null,null],[13,"Add","","`+`",5,null],[13,"Subtract","","`-`",5,null],[13,"Multiply","","`*`",5,null],[13,"Divide","","`/`",5,null],[13,"Modulus","","`%`",5,null],[13,"LAnd","","`&amp;&amp;`",5,null],[13,"LOr","","`||`",5,null],[13,"BitXor","","`^`",5,null],[13,"BitAnd","","`&amp;`",5,null],[13,"BitOr","","`|`",5,null],[13,"ShiftLeft","","`&lt;&lt;`",5,null],[13,"ShiftRight","","`&gt;&gt;`",5,null],[13,"Equal","","`==`",5,null],[13,"Less","","`&lt;`",5,null],[13,"LessEqual","","`&lt;=`",5,null],[13,"NotEqual","","`!=`",5,null],[13,"Greater","","`&gt;`",5,null],[13,"GreaterEqual","","`&gt;=`",5,null],[13,"Assign","","`=`",5,null],[13,"Inplace","","`&lt;-`",5,null],[13,"AssignOp","","`?=` where ? is one of the BinOpToken",5,null],[13,"As","","`as`",5,null],[13,"DotDot","","`..` range",5,null],[13,"DotDotDot","","`...` range",5,null],[13,"Colon","","`:`",5,null],[4,"Fixity","","",null,null],[13,"Left","","The operator is left-associative",6,null],[13,"Right","","The operator is right-associative",6,null],[13,"None","","The operator is not associative",6,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",6,null],[11,"fmt","","",6,null],[11,"from_token","","Create a new AssocOP from a token",5,{"inputs":[{"name":"token"}],"output":{"name":"option"}}],[11,"from_ast_binop","","Create a new AssocOp from ast::BinOpKind.",5,{"inputs":[{"name":"binopkind"}],"output":{"name":"self"}}],[11,"precedence","","Gets the precedence of this operator",5,null],[11,"fixity","","Gets the fixity of this operator",5,null],[11,"is_comparison","","",5,null],[11,"is_assign_like","","",5,null],[11,"to_ast_binop","","",5,null],[0,"small_vector","syntex_syntax::util","",null,null],[3,"SmallVector","syntex_syntax::util::small_vector","A vector type optimized for cases where the size is almost always 0 or 1",null,null],[3,"IntoIter","","",null,null],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"smallvector"}}],[11,"extend","","",7,null],[11,"zero","","",7,{"inputs":[],"output":{"name":"smallvector"}}],[11,"one","","",7,{"inputs":[{"name":"t"}],"output":{"name":"smallvector"}}],[11,"many","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"smallvector"}}],[11,"as_slice","","",7,null],[11,"pop","","",7,null],[11,"push","","",7,null],[11,"push_all","","",7,null],[11,"get","","",7,null],[11,"expect_one","","",7,null],[11,"len","","",7,null],[11,"is_empty","","",7,null],[11,"map","","",7,null],[11,"into_iter","","",7,null],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"move_flat_map","","",7,null],[0,"move_map","syntex_syntax::util","",null,null],[8,"MoveMap","syntex_syntax::util::move_map","",null,null],[11,"move_map","","",9,null],[10,"move_flat_map","","",9,null],[11,"fmt","syntex_syntax::util","",10,null],[11,"hash","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"new","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",10,null],[11,"deref","","",10,null],[11,"extend","","",10,null],[0,"json","syntex_syntax","A JSON emitter for errors.",null,null],[3,"JsonEmitter","syntex_syntax::json","",null,null],[11,"stderr","","",11,{"inputs":[{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"basic","","",11,{"inputs":[],"output":{"name":"jsonemitter"}}],[11,"new","","",11,{"inputs":[{"name":"box"},{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"emit","","",11,null],[0,"syntax","syntex_syntax","",null,null],[0,"abi","","",null,null],[3,"AbiData","syntex_syntax::abi","",null,null],[4,"Os","","",null,null],[13,"Windows","","",12,null],[13,"Macos","","",12,null],[13,"Linux","","",12,null],[13,"Android","","",12,null],[13,"Freebsd","","",12,null],[13,"iOS","","",12,null],[13,"Dragonfly","","",12,null],[13,"Bitrig","","",12,null],[13,"Netbsd","","",12,null],[13,"Openbsd","","",12,null],[13,"NaCl","","",12,null],[13,"Haiku","","",12,null],[13,"Solaris","","",12,null],[4,"Abi","","",null,null],[13,"Cdecl","","",13,null],[13,"Stdcall","","",13,null],[13,"Fastcall","","",13,null],[13,"Vectorcall","","",13,null],[13,"Aapcs","","",13,null],[13,"Win64","","",13,null],[13,"SysV64","","",13,null],[13,"Rust","","",13,null],[13,"C","","",13,null],[13,"System","","",13,null],[13,"RustIntrinsic","","",13,null],[13,"RustCall","","",13,null],[13,"PlatformIntrinsic","","",13,null],[4,"Architecture","","",null,null],[13,"X86","","",14,null],[13,"X86_64","","",14,null],[13,"Arm","","",14,null],[13,"Mips","","",14,null],[13,"Mipsel","","",14,null],[4,"AbiArchitecture","","",null,null],[13,"Rust","","Not a real ABI (e.g., intrinsic)",15,null],[13,"All","","An ABI that specifies cross-platform defaults (e.g., &quot;C&quot;)",15,null],[13,"Archs","","Multiple architectures (bitset)",15,null],[5,"lookup","","Returns the ABI with the given name (if any).",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"all_names","","",null,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",12,null],[11,"eq","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,null],[11,"hash","","",13,null],[11,"eq","","",13,null],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"clone","","",14,null],[11,"clone","","",16,null],[11,"clone","","",15,null],[11,"index","","",13,null],[11,"data","","",13,null],[11,"name","","",13,null],[11,"fmt","","",13,null],[11,"fmt","","",12,null],[0,"ast","syntex_syntax","",null,null],[3,"ThinVec","syntex_syntax::ast","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`).\nThe `Option&lt;Box&lt;..&gt;&gt;` wrapping allows us to represent a zero sized vector with `None`,\nwhich uses only a single (null) pointer.",null,null],[3,"Name","","A name is a part of an identifier, representing a string or gensym. It&#39;s\nthe result of interning.",null,null],[12,"0","","",17,null],[3,"Ident","","An identifier contains a Name (index into the interner\ntable) and a SyntaxContext to track renaming and\nmacro expansion per Flatt et al., &quot;Macros That Work Together&quot;",null,null],[12,"name","","",18,null],[12,"ctxt","","",18,null],[3,"Lifetime","","",null,null],[12,"id","","",19,null],[12,"span","","",19,null],[12,"name","","",19,null],[3,"LifetimeDef","","A lifetime definition, e.g. `&#39;a: &#39;b+&#39;c+&#39;d`",null,null],[12,"attrs","","",20,null],[12,"lifetime","","",20,null],[12,"bounds","","",20,null],[3,"Path","","A &quot;Path&quot; is essentially Rust&#39;s notion of a name.",null,null],[12,"span","","",21,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current\nmodule (like paths in an import).",21,null],[12,"segments","","The segments in the path: the things separated by `::`.",21,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"identifier","","The identifier portion of this path segment.",22,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in\ntwo flavors: `Path&lt;A,B,C&gt;` and `Path(A,B) -&gt; C`. Note that\nthis is more than just simple syntactic sugar; the use of\nparens affects the region binding rules, so we preserve the\ndistinction.",22,null],[3,"AngleBracketedParameterData","","A path like `Foo&lt;&#39;a, T&gt;`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",23,null],[12,"types","","The type parameters for this path segment, if present.",23,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",23,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -&gt; C`",null,null],[12,"span","","Overall span",24,null],[12,"inputs","","`(A,B)`",24,null],[12,"output","","`C`",24,null],[3,"NodeId","","",null,null],[3,"TyParam","","",null,null],[12,"attrs","","",25,null],[12,"ident","","",25,null],[12,"id","","",25,null],[12,"bounds","","",25,null],[12,"default","","",25,null],[12,"span","","",25,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration\nof a function, enum, trait, etc.",null,null],[12,"lifetimes","","",26,null],[12,"ty_params","","",26,null],[12,"where_clause","","",26,null],[12,"span","","",26,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",27,null],[12,"predicates","","",27,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"span","","",28,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",28,null],[12,"bounded_ty","","The type being bounded",28,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+&#39;static`)",28,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"span","","",29,null],[12,"lifetime","","",29,null],[12,"bounds","","",29,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"id","","",30,null],[12,"span","","",30,null],[12,"path","","",30,null],[12,"ty","","",30,null],[3,"Crate","","",null,null],[12,"module","","",31,null],[12,"attrs","","",31,null],[12,"config","","",31,null],[12,"span","","",31,null],[12,"exported_macros","","",31,null],[3,"Block","","A Block (`{ .. }`).",null,null],[12,"stmts","","Statements in a block",32,null],[12,"id","","",32,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",32,null],[12,"span","","",32,null],[3,"Pat","","",null,null],[12,"id","","",33,null],[12,"node","","",33,null],[12,"span","","",33,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",34,null],[12,"pat","","The pattern the field is destructured to",34,null],[12,"is_shorthand","","",34,null],[3,"Stmt","","A statement",null,null],[12,"id","","",35,null],[12,"node","","",35,null],[12,"span","","",35,null],[3,"Local","","Local represents a `let` statement, e.g., `let &lt;pat&gt;:&lt;ty&gt; = &lt;expr&gt;;`",null,null],[12,"pat","","",36,null],[12,"ty","","",36,null],[12,"init","","Initializer expression to set the value, if any",36,null],[12,"id","","",36,null],[12,"span","","",36,null],[12,"attrs","","",36,null],[3,"Arm","","An arm of a &#39;match&#39;.",null,null],[12,"attrs","","",37,null],[12,"pats","","",37,null],[12,"guard","","",37,null],[12,"body","","",37,null],[3,"Field","","",null,null],[12,"ident","","",38,null],[12,"expr","","",38,null],[12,"span","","",38,null],[3,"Expr","","An expression",null,null],[12,"id","","",39,null],[12,"node","","",39,null],[12,"span","","",39,null],[12,"attrs","","",39,null],[3,"QSelf","","The explicit Self type in a &quot;qualified path&quot;. The actual\npath, including the trait and the associated item, is stored\nseparately. `position` represents the index of the associated\nitem qualified with this Self type.",null,null],[12,"ty","","",40,null],[12,"position","","",40,null],[3,"Mac_","","Represents a macro invocation. The Path indicates which macro\nis being invoked, and the vector of token-trees contains the source\nof the macro invocation.",null,null],[12,"path","","",41,null],[12,"tts","","",41,null],[3,"MutTy","","",null,null],[12,"ty","","",42,null],[12,"mutbl","","",42,null],[3,"MethodSig","","Represents a method&#39;s signature in a trait declaration,\nor in an implementation.",null,null],[12,"unsafety","","",43,null],[12,"constness","","",43,null],[12,"abi","","",43,null],[12,"decl","","",43,null],[12,"generics","","",43,null],[3,"TraitItem","","Represents an item declaration within a trait declaration,\npossibly including a default implementation. A trait item is\neither required (meaning it doesn&#39;t have an implementation, just a\nsignature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",44,null],[12,"ident","","",44,null],[12,"attrs","","",44,null],[12,"node","","",44,null],[12,"span","","",44,null],[3,"ImplItem","","",null,null],[12,"id","","",45,null],[12,"ident","","",45,null],[12,"vis","","",45,null],[12,"defaultness","","",45,null],[12,"attrs","","",45,null],[12,"node","","",45,null],[12,"span","","",45,null],[3,"TypeBinding","","",null,null],[12,"id","","",46,null],[12,"ident","","",46,null],[12,"ty","","",46,null],[12,"span","","",46,null],[3,"Ty","","",null,null],[12,"id","","",47,null],[12,"node","","",47,null],[12,"span","","",47,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",48,null],[12,"abi","","",48,null],[12,"lifetimes","","",48,null],[12,"decl","","",48,null],[3,"InlineAsmOutput","","Inline assembly.",null,null],[12,"constraint","","",49,null],[12,"expr","","",49,null],[12,"is_rw","","",49,null],[12,"is_indirect","","",49,null],[3,"InlineAsm","","Inline assembly.",null,null],[12,"asm","","",50,null],[12,"asm_str_style","","",50,null],[12,"outputs","","",50,null],[12,"inputs","","",50,null],[12,"clobbers","","",50,null],[12,"volatile","","",50,null],[12,"alignstack","","",50,null],[12,"dialect","","",50,null],[12,"expn_id","","",50,null],[3,"Arg","","An argument in a function header.",null,null],[12,"ty","","",51,null],[12,"pat","","",51,null],[12,"id","","",51,null],[3,"FnDecl","","Header (not the body) of a function declaration.",null,null],[12,"inputs","","",52,null],[12,"output","","",52,null],[12,"variadic","","",52,null],[3,"Mod","","Module declaration.",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`.\nFor `mod foo;`, the inner span ranges from the first token\nto the last token in the external file.",53,null],[12,"items","","",53,null],[3,"ForeignMod","","Foreign module declaration.",null,null],[12,"abi","","",54,null],[12,"items","","",54,null],[3,"EnumDef","","",null,null],[12,"variants","","",55,null],[3,"Variant_","","",null,null],[12,"name","","",56,null],[12,"attrs","","",56,null],[12,"data","","",56,null],[12,"disr_expr","","Explicit discriminant, e.g. `Foo = 1`",56,null],[3,"PathListItem_","","",null,null],[12,"name","","",57,null],[12,"rename","","renamed in list, e.g. `use foo::{bar as baz};`",57,null],[12,"id","","",57,null],[3,"AttrId","","",null,null],[12,"0","","",58,null],[3,"Attribute_","","Doc-comments are promoted to attributes that have is_sugared_doc = true",null,null],[12,"id","","",59,null],[12,"style","","",59,null],[12,"value","","",59,null],[12,"is_sugared_doc","","",59,null],[3,"TraitRef","","TraitRef&#39;s appear in impls.",null,null],[12,"path","","",60,null],[12,"ref_id","","",60,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `&#39;a` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",61,null],[12,"trait_ref","","The `Foo&lt;&amp;&#39;a T&gt;` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",61,null],[12,"span","","",61,null],[3,"StructField","","Field of a struct.",null,null],[12,"span","","",62,null],[12,"ident","","",62,null],[12,"vis","","",62,null],[12,"id","","",62,null],[12,"ty","","",62,null],[12,"attrs","","",62,null],[3,"Item","","An item",null,null],[12,"ident","","",63,null],[12,"attrs","","",63,null],[12,"id","","",63,null],[12,"node","","",63,null],[12,"vis","","",63,null],[12,"span","","",63,null],[3,"ForeignItem","","",null,null],[12,"ident","","",64,null],[12,"attrs","","",64,null],[12,"node","","",64,null],[12,"id","","",64,null],[12,"span","","",64,null],[12,"vis","","",64,null],[3,"MacroDef","","A macro definition, in this crate or imported from another.",null,null],[12,"ident","","",65,null],[12,"attrs","","",65,null],[12,"id","","",65,null],[12,"span","","",65,null],[12,"imported_from","","",65,null],[12,"export","","",65,null],[12,"use_locally","","",65,null],[12,"allow_internal_unstable","","",65,null],[12,"body","","",65,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `&lt;&#39;a, A,B,C&gt;` in `foo::bar::baz::&lt;&#39;a, A,B,C&gt;`",66,null],[13,"Parenthesized","","The `(A,B)` and `C` in `Foo(A,B) -&gt; C`",66,null],[4,"TyParamBound","","The AST represents all type param bounds as types.\ntypeck::collect::compute_bounds matches these against\nthe &quot;special&quot; built-in traits (see middle::lang_items) and\ndetects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",67,null],[13,"RegionTyParamBound","","",67,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the\nmodifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",68,null],[13,"Maybe","","",68,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for&lt;&#39;c&gt; Foo: Send+Clone+&#39;c`",69,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `&#39;a: &#39;b+&#39;c`",69,null],[13,"EqPredicate","","An equality predicate (unsupported)",69,null],[4,"NestedMetaItemKind","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full MetaItem, for recursive meta items.",70,null],[13,"Literal","","A literal.",70,null],[4,"MetaItemKind","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",71,null],[13,"List","","List meta item.",71,null],[13,"NameValue","","Name value meta item.",71,null],[4,"BindingMode","","",null,null],[13,"ByRef","","",72,null],[13,"ByValue","","",72,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",73,null],[13,"Ident","","A `PatKind::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`),\nor a unit struct/variant pattern, or a const pattern (in the last two cases the third\nfield must be `None`). Disambiguation cannot be done with parser alone, so it happens\nduring name resolution.",73,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`.\nThe `bool` is `true` in the presence of a `..`.",73,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`.\nIf the `..` pattern fragment is present, then `Option&lt;usize&gt;` denotes its position.\n0 &lt;= position &lt;= subpats.len()",73,null],[13,"Path","","A possibly qualified path pattern.\nUnquailfied path patterns `A::B::C` can legally refer to variants, structs, constants\nor associated constants. Quailfied path patterns `&lt;A&gt;::B::C`/`&lt;A as Trait&gt;::B::C` can\nonly legally refer to associated constants.",73,null],[13,"Tuple","","A tuple pattern `(a, b)`.\nIf the `..` pattern fragment is present, then `Option&lt;usize&gt;` denotes its position.\n0 &lt;= position &lt;= subpats.len()",73,null],[13,"Box","","A `box` pattern",73,null],[13,"Ref","","A reference pattern, e.g. `&amp;mut (a, b)`",73,null],[13,"Lit","","A literal",73,null],[13,"Range","","A range pattern, e.g. `1...2`",73,null],[13,"Slice","","`[a, b, ..i, y, z]` is represented as:\n`PatKind::Slice(box [a, b], Some(i), box [y, z])`",73,null],[13,"Mac","","A macro pattern; pre-expansion",73,null],[4,"Mutability","","",null,null],[13,"Mutable","","",74,null],[13,"Immutable","","",74,null],[4,"BinOpKind","","",null,null],[13,"Add","","The `+` operator (addition)",75,null],[13,"Sub","","The `-` operator (subtraction)",75,null],[13,"Mul","","The `*` operator (multiplication)",75,null],[13,"Div","","The `/` operator (division)",75,null],[13,"Rem","","The `%` operator (modulus)",75,null],[13,"And","","The `&amp;&amp;` operator (logical and)",75,null],[13,"Or","","The `||` operator (logical or)",75,null],[13,"BitXor","","The `^` operator (bitwise xor)",75,null],[13,"BitAnd","","The `&amp;` operator (bitwise and)",75,null],[13,"BitOr","","The `|` operator (bitwise or)",75,null],[13,"Shl","","The `&lt;&lt;` operator (shift left)",75,null],[13,"Shr","","The `&gt;&gt;` operator (shift right)",75,null],[13,"Eq","","The `==` operator (equality)",75,null],[13,"Lt","","The `&lt;` operator (less than)",75,null],[13,"Le","","The `&lt;=` operator (less than or equal to)",75,null],[13,"Ne","","The `!=` operator (not equal to)",75,null],[13,"Ge","","The `&gt;=` operator (greater than or equal to)",75,null],[13,"Gt","","The `&gt;` operator (greater than)",75,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",76,null],[13,"Not","","The `!` operator for logical inversion",76,null],[13,"Neg","","The `-` operator for negation",76,null],[4,"StmtKind","","",null,null],[13,"Local","","A local (let) binding.",77,null],[13,"Item","","An item definition.",77,null],[13,"Expr","","Expr without trailing semi-colon.",77,null],[13,"Semi","","",77,null],[13,"Mac","","",77,null],[4,"MacStmtStyle","","",null,null],[13,"Semicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };`\n`foo!(...);`, `foo![...];`",78,null],[13,"Braces","","The macro statement had braces; e.g. foo! { ... }",78,null],[13,"NoBraces","","The macro statement had parentheses or brackets and no semicolon; e.g.\n`foo!(...)`. All of these will end up being converted into macro\nexpressions.",78,null],[4,"BlockCheckMode","","",null,null],[13,"Default","","",79,null],[13,"Unsafe","","",79,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",80,null],[13,"UserProvided","","",80,null],[4,"RangeLimits","","Limit types of a range (inclusive or exclusive)",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end",81,null],[13,"Closed","","Inclusive at the beginning and end",81,null],[4,"ExprKind","","",null,null],[13,"Box","","A `box x` expression.",82,null],[13,"InPlace","","First expr is the place; second expr is the value.",82,null],[13,"Vec","","An array (`[a, b, c, d]`)",82,null],[13,"Call","","A function call",82,null],[13,"MethodCall","","A method call (`x.foo::&lt;Bar, Baz&gt;(a, b, c, d)`)",82,null],[13,"Tup","","A tuple (`(a, b, c ,d)`)",82,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",82,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",82,null],[13,"Lit","","A literal (For example: `1`, `&quot;foo&quot;`)",82,null],[13,"Cast","","A cast (`foo as f64`)",82,null],[13,"Type","","",82,null],[13,"If","","An `if` block, with an optional else block",82,null],[13,"IfLet","","An `if let` expression with an optional else block",82,null],[13,"While","","A while loop, with an optional label",82,null],[13,"WhileLet","","A while-let loop, with an optional label",82,null],[13,"ForLoop","","A for loop, with an optional label",82,null],[13,"Loop","","Conditionless loop (can be exited with break, continue, or return)",82,null],[13,"Match","","A `match` block.",82,null],[13,"Closure","","A closure (for example, `move |a, b, c| {a + b + c}`)",82,null],[13,"Block","","A block (`{ ... }`)",82,null],[13,"Assign","","An assignment (`a = foo()`)",82,null],[13,"AssignOp","","An assignment with an operator",82,null],[13,"Field","","Access of a named struct field (`obj.foo`)",82,null],[13,"TupField","","Access of an unnamed field of a struct or tuple-struct",82,null],[13,"Index","","An indexing operation (`foo[2]`)",82,null],[13,"Range","","A range (`1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`)",82,null],[13,"Path","","Variable reference, possibly containing `::` and/or type\nparameters, e.g. foo::bar::&lt;baz&gt;.",82,null],[13,"AddrOf","","A referencing operation (`&amp;a` or `&amp;mut a`)",82,null],[13,"Break","","A `break`, with an optional label to break",82,null],[13,"Continue","","A `continue`, with an optional label",82,null],[13,"Ret","","A `return`, with an optional value to be returned",82,null],[13,"InlineAsm","","Output of the `asm!()` macro",82,null],[13,"Mac","","A macro invocation; pre-expansion",82,null],[13,"Struct","","A struct literal expression.",82,null],[13,"Repeat","","An array literal constructed from one repeated element.",82,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",82,null],[13,"Try","","`expr?`",82,null],[4,"CaptureBy","","A capture clause",null,null],[13,"Value","","",83,null],[13,"Ref","","",83,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `&quot;foo&quot;`",84,null],[13,"Raw","","A raw string, like `r##&quot;foo&quot;##`",84,null],[4,"LitIntType","","",null,null],[13,"Signed","","",85,null],[13,"Unsigned","","",85,null],[13,"Unsuffixed","","",85,null],[4,"LitKind","","Literal kind.",null,null],[13,"Str","","A string literal (`&quot;foo&quot;`)",86,null],[13,"ByteStr","","A byte string (`b&quot;foo&quot;`)",86,null],[13,"Byte","","A byte char (`b&#39;f&#39;`)",86,null],[13,"Char","","A character literal (`&#39;a&#39;`)",86,null],[13,"Int","","An integer literal (`1`)",86,null],[13,"Float","","A float literal (`1f64` or `1E10f64`)",86,null],[13,"FloatUnsuffixed","","A float literal without a suffix (`1.0 or 1.0E10`)",86,null],[13,"Bool","","A boolean literal",86,null],[4,"TraitItemKind","","",null,null],[13,"Const","","",87,null],[13,"Method","","",87,null],[13,"Type","","",87,null],[13,"Macro","","",87,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",88,null],[13,"Method","","",88,null],[13,"Type","","",88,null],[13,"Macro","","",88,null],[4,"IntTy","","",null,null],[13,"Is","","",89,null],[13,"I8","","",89,null],[13,"I16","","",89,null],[13,"I32","","",89,null],[13,"I64","","",89,null],[4,"UintTy","","",null,null],[13,"Us","","",90,null],[13,"U8","","",90,null],[13,"U16","","",90,null],[13,"U32","","",90,null],[13,"U64","","",90,null],[4,"FloatTy","","",null,null],[13,"F32","","",91,null],[13,"F64","","",91,null],[4,"TyKind","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length slice (`[T]`)",92,null],[13,"Array","","A fixed length array (`[T; n]`)",92,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",92,null],[13,"Rptr","","A reference (`&amp;&#39;a T` or `&amp;&#39;a mut T`)",92,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -&gt; bool`)",92,null],[13,"Never","","The never type (`!`)",92,null],[13,"Tup","","A tuple (`(A, B, C, D,...)`)",92,null],[13,"Path","","A path (`module::module::...::Type`), optionally\n&quot;qualified&quot;, e.g. `&lt;Vec&lt;T&gt; as SomeTrait&gt;::SomeType`.",92,null],[13,"ObjectSum","","Something like `A+B`. Note that `B` must always be a path.",92,null],[13,"PolyTraitRef","","A type like `for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a Bar&gt;`",92,null],[13,"ImplTrait","","An `impl TraitA+TraitB` type.",92,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",92,null],[13,"Typeof","","Unused for now",92,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been\nspecified. This can appear anywhere in a type.",92,null],[13,"ImplicitSelf","","Inferred type of a `self` or `&amp;self` argument in a method.",92,null],[13,"Mac","","",92,null],[4,"AsmDialect","","Inline assembly dialect.",null,null],[13,"Att","","",93,null],[13,"Intel","","",93,null],[4,"SelfKind","","Alternative representation for `Arg`s describing `self` parameter of methods.",null,null],[13,"Value","","`self`, `mut self`",94,null],[13,"Region","","`&amp;&#39;lt self`, `&amp;&#39;lt mut self`",94,null],[13,"Explicit","","`self: TYPE`, `mut self: TYPE`",94,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",95,null],[13,"Normal","","",95,null],[4,"Constness","","",null,null],[13,"Const","","",96,null],[13,"NotConst","","",96,null],[4,"Defaultness","","",null,null],[13,"Default","","",97,null],[13,"Final","","",97,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",98,null],[13,"Negative","","`impl !Trait for Type`",98,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",99,null],[13,"Ty","","Everything else",99,null],[4,"ViewPath_","","",null,null],[13,"ViewPathSimple","","`foo::bar::baz as quux`",100,null],[13,"ViewPathGlob","","`foo::bar::*`",100,null],[13,"ViewPathList","","`foo::bar::{a,b,c}`",100,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that\nare contained as statements within items. These two cases need to be\ndistinguished for pretty-printing.",null,null],[13,"Outer","","",101,null],[13,"Inner","","",101,null],[4,"Visibility","","",null,null],[13,"Public","","",102,null],[13,"Crate","","",102,null],[13,"Restricted","","",102,null],[12,"path","syntex_syntax::ast::Visibility","",102,null],[12,"id","","",102,null],[13,"Inherited","syntex_syntax::ast","",102,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","Struct variant.",103,null],[13,"Tuple","","Tuple variant.",103,null],[13,"Unit","","Unit variant.",103,null],[4,"ItemKind","","",null,null],[13,"ExternCrate","","An`extern crate` item, with optional original crate name.",104,null],[13,"Use","","A use declaration (`use` or `pub use`) item.",104,null],[13,"Static","","A static item (`static` or `pub static`).",104,null],[13,"Const","","A constant item (`const` or `pub const`).",104,null],[13,"Fn","","A function declaration (`fn` or `pub fn`).",104,null],[13,"Mod","","A module declaration (`mod` or `pub mod`).",104,null],[13,"ForeignMod","","An external module (`extern` or `pub extern`).",104,null],[13,"Ty","","A type alias (`type` or `pub type`).",104,null],[13,"Enum","","An enum definition (`enum` or `pub enum`).",104,null],[13,"Struct","","A struct definition (`struct` or `pub struct`).",104,null],[13,"Union","","A union definition (`union` or `pub union`).",104,null],[13,"Trait","","A Trait declaration (`trait` or `pub trait`).",104,null],[13,"DefaultImpl","","",104,null],[13,"Impl","","An implementation.",104,null],[13,"Mac","","A macro invocation (which includes macro definition).",104,null],[4,"ForeignItemKind","","An item within an `extern` block",null,null],[13,"Fn","","A foreign function",105,null],[13,"Static","","A foreign static item (`static ext: u8`), with optional mutability\n(the boolean is true when mutable)",105,null],[6,"TyParamBounds","","",null,null],[6,"CrateConfig","","The set of MetaItems that define the compilation environment of the crate,\nused to drive conditional compilation",null,null],[6,"NestedMetaItem","","A spanned compile-time attribute list item.",null,null],[6,"MetaItem","","A spanned compile-time attribute item.",null,null],[6,"BinOp","","",null,null],[6,"SpannedIdent","","",null,null],[6,"Mac","","",null,null],[6,"Lit","","A literal",null,null],[6,"ExplicitSelf","","",null,null],[6,"Variant","","",null,null],[6,"PathListItem","","",null,null],[6,"ViewPath","","",null,null],[6,"Attribute","","Meta-data associated with an item",null,null],[17,"CRATE_NODE_ID","","Node id used to represent the root of the crate.",null,null],[17,"DUMMY_NODE_ID","","When parsing and doing expansions, we initially give all AST nodes this AST\nnode value. Then later, in the renumber pass, we renumber them to have\nsmall, positive ids.",null,null],[11,"hash","","",17,null],[11,"cmp","","",17,null],[11,"partial_cmp","","",17,null],[11,"lt","","",17,null],[11,"le","","",17,null],[11,"gt","","",17,null],[11,"ge","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"hash","","",18,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"clone","","",18,null],[11,"as_str","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"encode","","",17,null],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"with_empty_ctxt","","",18,{"inputs":[{"name":"name"}],"output":{"name":"ident"}}],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[11,"encode","","",18,null],[11,"decode","","",18,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"fmt","","",20,null],[11,"hash","","",20,null],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"clone","","",20,null],[11,"hash","","",21,null],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"fmt","","",21,null],[11,"from_ident","","",21,{"inputs":[{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"fmt","","",22,null],[11,"hash","","",22,null],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"clone","","",22,null],[11,"fmt","","",66,null],[11,"hash","","",66,null],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"clone","","",66,null],[11,"none","","",66,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",66,null],[11,"has_lifetimes","","",66,null],[11,"has_types","","",66,null],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",66,null],[11,"lifetimes","","",66,null],[11,"bindings","","",66,null],[11,"fmt","","",23,null],[11,"hash","","",23,null],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"clone","","",23,null],[11,"fmt","","",24,null],[11,"hash","","",24,null],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"clone","","",24,null],[11,"fmt","","",106,null],[11,"hash","","",106,null],[11,"cmp","","",106,null],[11,"partial_cmp","","",106,null],[11,"lt","","",106,null],[11,"le","","",106,null],[11,"gt","","",106,null],[11,"ge","","",106,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"clone","","",106,null],[11,"new","","",106,{"inputs":[{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"from_u32","","",106,{"inputs":[{"name":"u32"}],"output":{"name":"nodeid"}}],[11,"as_usize","","",106,null],[11,"as_u32","","",106,null],[11,"fmt","","",106,null],[11,"encode","","",106,null],[11,"decode","","",106,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",67,null],[11,"hash","","",67,null],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",68,null],[11,"hash","","",68,null],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,null],[11,"eq","","",68,null],[11,"clone","","",68,null],[11,"fmt","","",25,null],[11,"hash","","",25,null],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"clone","","",25,null],[11,"fmt","","",26,null],[11,"hash","","",26,null],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"clone","","",26,null],[11,"is_lt_parameterized","","",26,null],[11,"is_type_parameterized","","",26,null],[11,"is_parameterized","","",26,null],[11,"default","","Creates an instance of `Generics`.",26,{"inputs":[],"output":{"name":"generics"}}],[11,"fmt","","",27,null],[11,"hash","","",27,null],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"fmt","","",69,null],[11,"hash","","",69,null],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",28,null],[11,"hash","","",28,null],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"hash","","",29,null],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"clone","","",29,null],[11,"fmt","","",30,null],[11,"hash","","",30,null],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"clone","","",30,null],[11,"fmt","","",31,null],[11,"hash","","",31,null],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"clone","","",31,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"fmt","","",70,null],[11,"hash","","",70,null],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",71,null],[11,"hash","","",71,null],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,null],[11,"clone","","",71,null],[11,"eq","","",71,null],[11,"fmt","","",32,null],[11,"hash","","",32,null],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"clone","","",32,null],[11,"hash","","",33,null],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"clone","","",33,null],[11,"fmt","","",33,null],[11,"walk","","",33,null],[11,"fmt","","",34,null],[11,"hash","","",34,null],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",34,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"clone","","",34,null],[11,"fmt","","",72,null],[11,"hash","","",72,null],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"hash","","",73,null],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",74,null],[11,"hash","","",74,null],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",74,null],[11,"eq","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",75,null],[11,"hash","","",75,null],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",75,null],[11,"eq","","",75,null],[11,"clone","","",75,null],[11,"to_string","","",75,null],[11,"lazy","","",75,null],[11,"is_shift","","",75,null],[11,"is_comparison","","",75,null],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",75,null],[11,"fmt","","",76,null],[11,"hash","","",76,null],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,null],[11,"eq","","",76,null],[11,"clone","","",76,null],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",76,{"inputs":[{"name":"unop"}],"output":{"name":"bool"}}],[11,"to_string","","",76,{"inputs":[{"name":"unop"}],"output":{"name":"str"}}],[11,"hash","","",35,null],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"clone","","",35,null],[11,"add_trailing_semicolon","","",35,null],[11,"fmt","","",35,null],[11,"hash","","",77,null],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",78,null],[11,"hash","","",78,null],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,null],[11,"eq","","",78,null],[11,"clone","","",78,null],[11,"fmt","","",36,null],[11,"hash","","",36,null],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",36,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"clone","","",36,null],[11,"fmt","","",37,null],[11,"hash","","",37,null],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",37,null],[11,"eq","","",37,null],[11,"ne","","",37,null],[11,"clone","","",37,null],[11,"fmt","","",38,null],[11,"hash","","",38,null],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",38,null],[11,"eq","","",38,null],[11,"ne","","",38,null],[11,"clone","","",38,null],[11,"fmt","","",79,null],[11,"hash","","",79,null],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"clone","","",79,null],[11,"fmt","","",80,null],[11,"hash","","",80,null],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,null],[11,"eq","","",80,null],[11,"clone","","",80,null],[11,"hash","","",39,null],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"clone","","",39,null],[11,"fmt","","",39,null],[11,"fmt","","",81,null],[11,"hash","","",81,null],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,null],[11,"eq","","",81,null],[11,"clone","","",81,null],[11,"fmt","","",82,null],[11,"hash","","",82,null],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"clone","","",82,null],[11,"fmt","","",40,null],[11,"hash","","",40,null],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"clone","","",40,null],[11,"fmt","","",83,null],[11,"hash","","",83,null],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",83,null],[11,"eq","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",41,null],[11,"hash","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"clone","","",41,null],[11,"fmt","","",84,null],[11,"hash","","",84,null],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"hash","","",85,null],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"fmt","","",86,null],[11,"hash","","",86,null],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"is_str","","Returns true if this literal is a string and false otherwise.",86,null],[11,"is_unsuffixed","","Returns true if this literal has no suffix. Note: this will return true\nfor literals with prefixes such as raw strings and byte strings.",86,null],[11,"is_suffixed","","Returns true if this literal has a suffix.",86,null],[11,"fmt","","",42,null],[11,"hash","","",42,null],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"clone","","",42,null],[11,"fmt","","",43,null],[11,"hash","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"clone","","",43,null],[11,"fmt","","",44,null],[11,"hash","","",44,null],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"clone","","",44,null],[11,"fmt","","",87,null],[11,"hash","","",87,null],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"clone","","",87,null],[11,"fmt","","",45,null],[11,"hash","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"clone","","",45,null],[11,"fmt","","",88,null],[11,"hash","","",88,null],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"hash","","",89,null],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",89,null],[11,"eq","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",89,null],[11,"ty_to_string","","",89,null],[11,"val_to_string","","",89,null],[11,"ty_max","","",89,null],[11,"bit_width","","",89,null],[11,"hash","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,null],[11,"eq","","",90,null],[11,"clone","","",90,null],[11,"ty_to_string","","",90,null],[11,"val_to_string","","",90,null],[11,"ty_max","","",90,null],[11,"bit_width","","",90,null],[11,"fmt","","",90,null],[11,"fmt","","",90,null],[11,"hash","","",91,null],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",91,null],[11,"eq","","",91,null],[11,"clone","","",91,null],[11,"fmt","","",91,null],[11,"fmt","","",91,null],[11,"ty_to_string","","",91,null],[11,"bit_width","","",91,null],[11,"fmt","","",46,null],[11,"hash","","",46,null],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"hash","","",47,null],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"clone","","",47,null],[11,"fmt","","",47,null],[11,"fmt","","",48,null],[11,"hash","","",48,null],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"clone","","",48,null],[11,"fmt","","",92,null],[11,"hash","","",92,null],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",92,null],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"clone","","",92,null],[11,"fmt","","",93,null],[11,"hash","","",93,null],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",93,null],[11,"eq","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",49,null],[11,"hash","","",49,null],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,null],[11,"eq","","",49,null],[11,"ne","","",49,null],[11,"clone","","",49,null],[11,"fmt","","",50,null],[11,"hash","","",50,null],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",50,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"clone","","",50,null],[11,"fmt","","",51,null],[11,"hash","","",51,null],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"clone","","",51,null],[11,"fmt","","",94,null],[11,"hash","","",94,null],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",94,null],[11,"eq","","",94,null],[11,"ne","","",94,null],[11,"clone","","",94,null],[11,"to_self","","",51,null],[11,"is_self","","",51,null],[11,"from_self","","",51,{"inputs":[{"name":"explicitself"},{"name":"spannedident"}],"output":{"name":"arg"}}],[11,"fmt","","",52,null],[11,"hash","","",52,null],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"clone","","",52,null],[11,"get_self","","",52,null],[11,"has_self","","",52,null],[11,"fmt","","",95,null],[11,"hash","","",95,null],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",95,null],[11,"eq","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"hash","","",96,null],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",96,null],[11,"eq","","",96,null],[11,"clone","","",96,null],[11,"fmt","","",97,null],[11,"hash","","",97,null],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",97,null],[11,"eq","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",95,null],[11,"hash","","",98,null],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",98,null],[11,"eq","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",98,null],[11,"fmt","","",99,null],[11,"hash","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",99,null],[11,"eq","","",99,null],[11,"ne","","",99,null],[11,"clone","","",99,null],[11,"span","","",99,null],[11,"fmt","","",53,null],[11,"hash","","",53,null],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",54,null],[11,"hash","","",54,null],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",54,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"clone","","",54,null],[11,"fmt","","",55,null],[11,"hash","","",55,null],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"clone","","",55,null],[11,"fmt","","",56,null],[11,"hash","","",56,null],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"fmt","","",57,null],[11,"hash","","",57,null],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"fmt","","",100,null],[11,"hash","","",100,null],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",100,null],[11,"eq","","",100,null],[11,"ne","","",100,null],[11,"clone","","",100,null],[11,"path","","",100,null],[11,"fmt","","",101,null],[11,"hash","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",101,null],[11,"eq","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",58,null],[11,"hash","","",58,null],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"clone","","",58,null],[11,"fmt","","",59,null],[11,"hash","","",59,null],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",60,null],[11,"hash","","",60,null],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"clone","","",60,null],[11,"fmt","","",61,null],[11,"hash","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",102,null],[11,"hash","","",102,null],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",62,null],[11,"hash","","",62,null],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",103,null],[11,"hash","","",103,null],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"clone","","",103,null],[11,"fields","","",103,null],[11,"id","","",103,null],[11,"is_struct","","",103,null],[11,"is_tuple","","",103,null],[11,"is_unit","","",103,null],[11,"fmt","","",63,null],[11,"hash","","",63,null],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"fmt","","",104,null],[11,"hash","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",104,null],[11,"eq","","",104,null],[11,"ne","","",104,null],[11,"clone","","",104,null],[11,"descriptive_variant","","",104,null],[11,"fmt","","",64,null],[11,"hash","","",64,null],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",105,null],[11,"hash","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",105,null],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"clone","","",105,null],[11,"descriptive_variant","","",105,null],[11,"fmt","","",65,null],[11,"hash","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",65,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"clone","","",65,null],[0,"attr","syntex_syntax","",null,null],[3,"Stability","syntex_syntax::attr","Represents the #[stable], #[unstable] and #[rustc_deprecated] attributes.",null,null],[12,"level","","",107,null],[12,"feature","","",107,null],[12,"rustc_depr","","",107,null],[3,"RustcDeprecation","","",null,null],[12,"since","","",108,null],[12,"reason","","",108,null],[3,"Deprecation","","",null,null],[12,"since","","",109,null],[12,"note","","",109,null],[4,"InlineAttr","","",null,null],[13,"None","","",110,null],[13,"Hint","","",110,null],[13,"Always","","",110,null],[13,"Never","","",110,null],[4,"StabilityLevel","","The available stability levels.",null,null],[13,"Unstable","","",111,null],[12,"reason","syntex_syntax::attr::StabilityLevel","",111,null],[12,"issue","","",111,null],[13,"Stable","syntex_syntax::attr","",111,null],[12,"since","syntex_syntax::attr::StabilityLevel","",111,null],[4,"ReprAttr","syntex_syntax::attr","",null,null],[13,"ReprAny","","",112,null],[13,"ReprInt","","",112,null],[13,"ReprExtern","","",112,null],[13,"ReprPacked","","",112,null],[13,"ReprSimd","","",112,null],[4,"IntType","","",null,null],[13,"SignedInt","","",113,null],[13,"UnsignedInt","","",113,null],[5,"mark_used","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_used","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mk_name_value_item_str","","",null,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_name_value_item","","",null,{"inputs":[{"name":"internedstring"},{"name":"lit"}],"output":{"name":"p"}}],[5,"mk_list_item","","",null,{"inputs":[{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[5,"mk_list_word_item","","",null,{"inputs":[{"name":"internedstring"}],"output":{"name":"nestedmetaitem"}}],[5,"mk_word_item","","",null,{"inputs":[{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_spanned_name_value_item","","",null,{"inputs":[{"name":"span"},{"name":"internedstring"},{"name":"lit"}],"output":{"name":"p"}}],[5,"mk_spanned_list_item","","",null,{"inputs":[{"name":"span"},{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[5,"mk_spanned_word_item","","",null,{"inputs":[{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_attr_id","","",null,{"inputs":[],"output":{"name":"attrid"}}],[5,"mk_attr_inner","","Returns an inner attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_inner","","Returns an innter attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_attr_outer","","Returns an outer attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_outer","","Returns an outer attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_doc_attr_outer","","",null,{"inputs":[{"name":"attrid"},{"name":"p"},{"name":"bool"}],"output":{"name":"attribute"}}],[5,"mk_sugared_doc_attr","","",null,{"inputs":[{"name":"attrid"},{"name":"internedstring"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"attribute"}}],[5,"contains","","Check if `needle` occurs in `haystack` by a structural\ncomparison. This is slightly subtle, and relies on ignoring the\nspan included in the `==` comparison a plain MetaItem.",null,null],[5,"list_contains_name","","",null,null],[5,"contains_name","","",null,null],[5,"first_attr_value_str_by_name","","",null,null],[5,"last_meta_item_value_str_by_name","","",null,null],[5,"find_crate_name","","",null,null],[5,"find_export_name_attr","","Find the value of #[export_name=*] attribute and check its validity.",null,null],[5,"contains_extern_indicator","","",null,null],[5,"find_inline_attr","","Determine what `#[inline]` attribute is present in `attrs`, if any.",null,null],[5,"requests_inline","","True if `#[inline]` or `#[inline(always)]` is present in `attrs`.",null,null],[5,"cfg_matches","","Tests if a cfg-pattern matches the cfg set",null,null],[5,"find_stability","","Find the first stability attribute. `None` if none exists.",null,null],[5,"find_deprecation","","Find the deprecation attribute. `None` if none exists.",null,null],[5,"require_unique_names","","",null,null],[5,"find_repr_attrs","","Parse #[repr(...)] forms.",null,{"inputs":[{"name":"handler"},{"name":"attribute"}],"output":{"name":"vec"}}],[8,"HasAttrs","","",null,null],[10,"attrs","","",114,null],[10,"map_attrs","","",114,null],[11,"meta_item","","Returns the MetaItem if self is a NestedMetaItemKind::MetaItem.",115,null],[11,"literal","","Returns the Lit if self is a NestedMetaItemKind::Literal.",115,null],[11,"span","","Returns the Span for `self`.",115,null],[11,"check_name","","Returns true if this list item is a MetaItem with a name of `name`.",115,null],[11,"name","","Returns the name of the meta item, e.g. `foo` in `#[foo]`,\n`#[foo=&quot;bar&quot;]` and `#[foo(bar)]`, if self is a MetaItem",115,null],[11,"value_str","","Gets the string value if self is a MetaItem and the MetaItem is a\nMetaItemKind::NameValue variant containing a string, otherwise None.",115,null],[11,"word","","Returns a MetaItem if self is a MetaItem with Kind Word.",115,null],[11,"meta_item_list","","Gets a list of inner meta items from a list MetaItem type.",115,null],[11,"is_meta_item","","Returns `true` if the variant is MetaItem.",115,null],[11,"is_literal","","Returns `true` if the variant is Literal.",115,null],[11,"is_word","","Returns `true` if self is a MetaItem and the meta item is a word.",115,null],[11,"is_value_str","","Returns `true` if self is a MetaItem and the meta item is a ValueString.",115,null],[11,"is_meta_item_list","","Returns `true` if self is a MetaItem and the meta item is a list.",115,null],[11,"check_name","","",116,null],[11,"name","","",116,null],[11,"value_str","","",116,null],[11,"meta_item_list","","",116,null],[11,"is_word","","",116,null],[11,"span","","",116,null],[11,"is_meta_item_list","","",116,null],[11,"is_value_str","","Indicates if the attribute is a Value String.",116,null],[11,"name","","",117,null],[11,"value_str","","",117,null],[11,"meta_item_list","","",117,null],[11,"is_word","","",117,null],[11,"span","","",117,null],[11,"check_name","","",117,null],[11,"is_value_str","","",117,null],[11,"is_meta_item_list","","",117,null],[11,"meta","","Extract the MetaItem from inside this Attribute.",116,null],[11,"with_desugared_doc","","Convert self to a normal #[doc=&quot;foo&quot;] comment, if it is a\ncomment like `///` or `/** */`. (Returns self unchanged for\nnon-sugared doc attributes.)",116,null],[11,"eq","","",110,null],[11,"clone","","",110,null],[11,"hash","","",107,null],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",107,null],[11,"hash","","",111,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"partial_cmp","","",111,null],[11,"lt","","",111,null],[11,"le","","",111,null],[11,"gt","","",111,null],[11,"ge","","",111,null],[11,"eq","","",111,null],[11,"ne","","",111,null],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",111,null],[11,"hash","","",108,null],[11,"fmt","","",108,null],[11,"clone","","",108,null],[11,"partial_cmp","","",108,null],[11,"lt","","",108,null],[11,"le","","",108,null],[11,"gt","","",108,null],[11,"ge","","",108,null],[11,"eq","","",108,null],[11,"ne","","",108,null],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",108,null],[11,"hash","","",109,null],[11,"fmt","","",109,null],[11,"clone","","",109,null],[11,"partial_cmp","","",109,null],[11,"lt","","",109,null],[11,"le","","",109,null],[11,"gt","","",109,null],[11,"ge","","",109,null],[11,"eq","","",109,null],[11,"ne","","",109,null],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",109,null],[11,"is_unstable","","",111,null],[11,"is_stable","","",111,null],[11,"clone","","",112,null],[11,"decode","","",112,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",112,null],[11,"fmt","","",112,null],[11,"eq","","",112,null],[11,"ne","","",112,null],[11,"is_ffi_safe","","",112,null],[11,"clone","","",113,null],[11,"decode","","",113,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",113,null],[11,"fmt","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"hash","","",113,null],[11,"is_signed","","",113,null],[11,"attrs","syntex_syntax::util","",10,null],[11,"map_attrs","","",10,null],[11,"attrs","syntex_syntax::ast","",77,null],[11,"map_attrs","","",77,null],[11,"attrs","","",63,null],[11,"map_attrs","","",63,null],[11,"attrs","","",39,null],[11,"map_attrs","","",39,null],[11,"attrs","","",36,null],[11,"map_attrs","","",36,null],[11,"attrs","","",64,null],[11,"map_attrs","","",64,null],[11,"attrs","","",62,null],[11,"map_attrs","","",62,null],[11,"attrs","","",45,null],[11,"map_attrs","","",45,null],[11,"attrs","","",44,null],[11,"map_attrs","","",44,null],[11,"attrs","","",37,null],[11,"map_attrs","","",37,null],[11,"attrs","","",35,null],[11,"map_attrs","","",35,null],[11,"attrs","syntex_syntax::attr","",118,null],[11,"map_attrs","","",118,null],[0,"codemap","syntex_syntax","The CodeMap tracks all the source code used within a single crate, mapping\nfrom integer byte positions to the original source code location. Each bit\nof source parsed during crate parsing (typically files, in-memory strings,\nor various bits of macro expansion) cover a continuous range of bytes in the\nCodeMap and are represented by FileMaps. Byte positions are stored in\n`spans` and used pervasively in the compiler. They are absolute positions\nwithin the CodeMap, which upon request can be converted to line and column\ninformation, source code snippets, etc.",null,null],[3,"Spanned","syntex_syntax::codemap","",null,null],[12,"node","","",119,null],[12,"span","","",119,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",120,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated\nfeatures internally without forcing the whole crate to opt-in\nto them.",120,null],[12,"span","","The span of the macro definition itself. The macro may not\nhave a sensible definition span (e.g. something defined\ncompletely inside libsyntax) in which case this is None.",120,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g.\n`let x = foo!();` or `if let Some(y) = x {}`",121,null],[12,"callee","","Information about the expansion.",121,null],[3,"RealFileLoader","","A FileLoader that uses std::fs to load real files.",null,null],[3,"CodeMap","","",null,null],[12,"files","","",122,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] &lt;item&gt;",123,null],[13,"MacroBang","","e.g. `format!()`",123,null],[5,"original_sp","","Return the span itself if it doesn&#39;t come from a macro expansion,\notherwise return the call site span up to the `enclosing_sp` by\nfollowing the `expn_info` chain.",null,{"inputs":[{"name":"codemap"},{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[5,"spanned","","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"respan","","",null,{"inputs":[{"name":"span"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"dummy_spanned","","",null,{"inputs":[{"name":"t"}],"output":{"name":"spanned"}}],[5,"combine_spans","","Build a span that covers the two provided spans.",null,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[8,"FileLoader","","An abstraction over the fs operations used by the Parser.",null,null],[10,"file_exists","","Query the existence of a file.",124,null],[10,"abs_path","","Return an absolute path to a file, if possible.",124,null],[10,"read_file","","Read the contents of an UTF-8 file into memory.",124,null],[11,"eq","","",123,null],[11,"ne","","",123,null],[11,"fmt","","",123,null],[11,"hash","","",123,null],[11,"clone","","",123,null],[11,"fmt","","",119,null],[11,"hash","","",119,null],[11,"decode","","",119,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",119,null],[11,"eq","","",119,null],[11,"ne","","",119,null],[11,"clone","","",119,null],[11,"fmt","","",120,null],[11,"hash","","",120,null],[11,"clone","","",120,null],[11,"name","","",120,null],[11,"fmt","","",121,null],[11,"hash","","",121,null],[11,"file_exists","","",125,null],[11,"abs_path","","",125,null],[11,"read_file","","",125,null],[11,"new","","",122,{"inputs":[],"output":{"name":"codemap"}}],[11,"with_file_loader","","",122,{"inputs":[{"name":"box"}],"output":{"name":"codemap"}}],[11,"file_exists","","",122,null],[11,"load_file","","",122,null],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don&#39;t\nintend to set the line information yourself, you should use new_filemap_and_lines.",122,null],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",122,null],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external\ncrate. The source code of such an &quot;imported filemap&quot; is not available,\nbut we still know enough to generate accurate debuginfo location\ninformation for things inlined from other crates.",122,null],[11,"mk_substr_filename","","",122,null],[11,"lookup_char_pos","","Lookup source information about a BytePos",122,null],[11,"lookup_char_pos_adj","","",122,null],[11,"merge_spans","","Returns `Some(span)`, a union of the lhs and rhs span.  The lhs must precede the rhs. If\nthere are gaps between lhs and rhs, the resulting union will cross these gaps.\nFor this to work, the spans have to be:\n   * the expn_id of both spans much match\n   * the lhs span needs to end on the same line the rhs span begins\n   * the lhs span must start at or before the rhs span",122,null],[11,"span_to_string","","",122,null],[11,"span_to_expanded_string","","Returns a formatted string showing the expansion chain of a span",122,null],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for\nthe macro callsite that expanded to it.",122,null],[11,"source_callee","","Return the source callee.",122,null],[11,"span_to_filename","","",122,null],[11,"span_to_lines","","",122,null],[11,"span_to_snippet","","",122,null],[11,"get_filemap","","",122,null],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",122,null],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",122,null],[11,"lookup_filemap_idx","","",122,null],[11,"record_expansion","","",122,null],[11,"with_expn_info","","",122,null],[11,"span_allows_unstable","","Check if a span is &quot;internal&quot; to a macro in which #[unstable]\nitems can be used (that is, a macro marked with\n`#[allow_internal_unstable]`).",122,null],[11,"count_lines","","",122,null],[11,"macro_backtrace","","",122,null],[11,"lookup_char_pos","","",122,null],[11,"span_to_lines","","",122,null],[11,"span_to_string","","",122,null],[11,"span_to_filename","","",122,null],[11,"macro_backtrace","","",122,null],[11,"merge_spans","","",122,null],[0,"config","syntex_syntax","",null,null],[3,"StripUnconfigured","syntex_syntax::config","A folder that strips out items that do not belong in the current configuration.",null,null],[12,"config","","",126,null],[12,"should_test","","",126,null],[12,"sess","","",126,null],[12,"features","","",126,null],[5,"features","","",null,null],[5,"is_test_or_bench","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[11,"configure","","",126,null],[11,"process_cfg_attrs","","",126,null],[11,"in_cfg","","",126,null],[11,"configure_foreign_mod","","",126,null],[11,"configure_item_kind","","",126,null],[11,"configure_expr_kind","","",126,null],[11,"configure_expr","","",126,null],[11,"configure_stmt","","",126,null],[11,"fold_foreign_mod","","",126,null],[11,"fold_item_kind","","",126,null],[11,"fold_expr","","",126,null],[11,"fold_opt_expr","","",126,null],[11,"fold_stmt","","",126,null],[11,"fold_item","","",126,null],[11,"fold_impl_item","","",126,null],[11,"fold_trait_item","","",126,null],[11,"fold_mac","","",126,null],[0,"entry","syntex_syntax","",null,null],[4,"EntryPointType","syntex_syntax::entry","",null,null],[13,"None","","",127,null],[13,"MainNamed","","",127,null],[13,"MainAttr","","",127,null],[13,"Start","","",127,null],[13,"OtherMain","","",127,null],[5,"entry_point_type","","",null,{"inputs":[{"name":"item"},{"name":"usize"}],"output":{"name":"entrypointtype"}}],[0,"feature_gate","syntex_syntax","Feature gating",null,null],[3,"Features","syntex_syntax::feature_gate","A set of features to be used by later passes.",null,null],[12,"declared_stable_lang_features","","#![feature] attrs for stable language features, for error reporting",128,null],[12,"declared_lib_features","","#![feature] attrs for non-language (library) features",128,null],[12,"asm","","",128,null],[12,"concat_idents","","",128,null],[12,"link_args","","",128,null],[12,"log_syntax","","",128,null],[12,"non_ascii_idents","","",128,null],[12,"plugin_registrar","","",128,null],[12,"thread_local","","",128,null],[12,"trace_macros","","",128,null],[12,"intrinsics","","",128,null],[12,"lang_items","","",128,null],[12,"link_llvm_intrinsics","","",128,null],[12,"linkage","","",128,null],[12,"quote","","",128,null],[12,"simd","","",128,null],[12,"rustc_diagnostic_macros","","",128,null],[12,"advanced_slice_patterns","","",128,null],[12,"box_syntax","","",128,null],[12,"placement_in_syntax","","",128,null],[12,"reflect","","",128,null],[12,"unboxed_closures","","",128,null],[12,"pushpop_unsafe","","",128,null],[12,"allocator","","",128,null],[12,"fundamental","","",128,null],[12,"linked_from","","",128,null],[12,"main","","",128,null],[12,"needs_allocator","","",128,null],[12,"on_unimplemented","","",128,null],[12,"plugin","","",128,null],[12,"simd_ffi","","",128,null],[12,"start","","",128,null],[12,"structural_match","","",128,null],[12,"panic_runtime","","",128,null],[12,"needs_panic_runtime","","",128,null],[12,"optin_builtin_traits","","",128,null],[12,"macro_reexport","","",128,null],[12,"staged_api","","",128,null],[12,"unmarked_api","","",128,null],[12,"no_core","","",128,null],[12,"box_patterns","","",128,null],[12,"dropck_parametricity","","",128,null],[12,"dropck_eyepatch","","",128,null],[12,"custom_attribute","","",128,null],[12,"custom_derive","","",128,null],[12,"rustc_attrs","","",128,null],[12,"allow_internal_unstable","","",128,null],[12,"slice_patterns","","",128,null],[12,"associated_consts","","",128,null],[12,"const_fn","","",128,null],[12,"const_indexing","","",128,null],[12,"prelude_import","","",128,null],[12,"static_recursion","","",128,null],[12,"default_type_parameter_fallback","","",128,null],[12,"associated_type_defaults","","",128,null],[12,"repr_simd","","",128,null],[12,"cfg_target_feature","","",128,null],[12,"platform_intrinsics","","",128,null],[12,"unwind_attributes","","",128,null],[12,"naked_functions","","",128,null],[12,"no_debug","","",128,null],[12,"omit_gdb_pretty_printer_section","","",128,null],[12,"cfg_target_vendor","","",128,null],[12,"stmt_expr_attributes","","",128,null],[12,"type_ascription","","",128,null],[12,"cfg_target_thread_local","","",128,null],[12,"abi_vectorcall","","",128,null],[12,"inclusive_range_syntax","","",128,null],[12,"specialization","","",128,null],[12,"pub_restricted","","",128,null],[12,"drop_types_in_const","","",128,null],[12,"cfg_target_has_atomic","","",128,null],[12,"dotdot_in_tuple_patterns","","",128,null],[12,"conservative_impl_trait","","",128,null],[12,"relaxed_adts","","",128,null],[12,"never_type","","",128,null],[12,"attr_literals","","",128,null],[12,"abi_sysv64","","",128,null],[12,"item_like_imports","","",128,null],[12,"proc_macro","","",128,null],[12,"untagged_unions","","",128,null],[12,"static_in_const","","",128,null],[12,"compiler_builtins","","",128,null],[12,"generic_param_attrs","","",128,null],[3,"GatedCfg","","",null,null],[4,"AttributeType","","",null,null],[13,"Normal","","Normal, builtin attribute that is consumed\nby the compiler before the unused_attribute check",129,null],[13,"Whitelisted","","Builtin attribute that may not be consumed by the compiler\nbefore the unused_attribute check. These attributes\nwill be ignored by the unused_attribute lint",129,null],[13,"CrateLevel","","Builtin attribute that is only allowed at the crate level",129,null],[4,"AttributeGate","","",null,null],[13,"Gated","","Is gated by a given feature gate, reason\nand function to check if enabled",130,null],[13,"Ungated","","Ungated attribute, can be used on all release channels",130,null],[4,"GateIssue","","",null,null],[13,"Language","","",131,null],[13,"Library","","",131,null],[4,"UnstableFeatures","","",null,null],[13,"Disallow","","Hard errors for unstable features are active, as on\nbeta/stable channels.",132,null],[13,"Allow","","Allow features to me activated, as on nightly.",132,null],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time\nduring the build that feature-related lints are set to warn or above\nbecause the build turns on warnings-as-errors and uses lots of unstable\nfeatures. As a result, this is always required for building Rust itself.",132,null],[5,"check_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"parsesess"},{"name":"codemap"},{"name":"features"}],"output":null}],[5,"find_lang_feature_accepted_version","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"emit_feature_err","","",null,{"inputs":[{"name":"parsesess"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":null}],[5,"feature_err","","",null,{"inputs":[{"name":"parsesess"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[5,"get_features","","",null,null],[5,"check_crate","","",null,null],[17,"KNOWN_ATTRIBUTES","","",null,null],[17,"EXPLAIN_STMT_ATTR_SYNTAX","","",null,null],[17,"EXPLAIN_ASM","","",null,null],[17,"EXPLAIN_LOG_SYNTAX","","",null,null],[17,"EXPLAIN_CONCAT_IDENTS","","",null,null],[17,"EXPLAIN_TRACE_MACROS","","",null,null],[17,"EXPLAIN_ALLOW_INTERNAL_UNSTABLE","","",null,null],[17,"EXPLAIN_CUSTOM_DERIVE","","",null,null],[17,"EXPLAIN_DERIVE_UNDERSCORE","","",null,null],[17,"EXPLAIN_PLACEMENT_IN","","",null,null],[11,"new","","",128,{"inputs":[],"output":{"name":"features"}}],[11,"fmt","","",129,null],[11,"clone","","",129,null],[11,"eq","","",129,null],[11,"fmt","","",130,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"fmt","","",133,null],[11,"gate","","",133,{"inputs":[{"name":"metaitem"}],"output":{"name":"option"}}],[11,"check_and_emit","","",133,null],[11,"hash","","",132,null],[11,"eq","","",132,null],[11,"clone","","",132,null],[11,"from_environment","","",132,{"inputs":[],"output":{"name":"unstablefeatures"}}],[11,"is_nightly_build","","",132,null],[0,"fold","syntex_syntax","A Folder represents an AST-&gt;AST fold; it accepts an AST piece,\nand returns a piece of the same type. So, for instance, macro\nexpansion is a Folder that walks over an AST and produces another\nAST.",null,null],[5,"noop_fold_meta_items","syntex_syntax::fold","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_view_path","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"fold_attrs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"fold_thin_attrs","","",null,{"inputs":[{"name":"thinvec"},{"name":"t"}],"output":{"name":"thinvec"}}],[5,"noop_fold_arm","","",null,{"inputs":[{"name":"arm"},{"name":"t"}],"output":{"name":"arm"}}],[5,"noop_fold_ty_binding","","",null,{"inputs":[{"name":"typebinding"},{"name":"t"}],"output":{"name":"typebinding"}}],[5,"noop_fold_ty","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_foreign_mod","","",null,{"inputs":[{"name":"foreignmod"},{"name":"t"}],"output":{"name":"foreignmod"}}],[5,"noop_fold_variant","","",null,{"inputs":[{"name":"variant"},{"name":"t"}],"output":{"name":"variant"}}],[5,"noop_fold_ident","","",null,{"inputs":[{"name":"ident"},{"name":"t"}],"output":{"name":"ident"}}],[5,"noop_fold_usize","","",null,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"usize"}}],[5,"noop_fold_path","","",null,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[5,"noop_fold_path_parameters","","",null,{"inputs":[{"name":"pathparameters"},{"name":"t"}],"output":{"name":"pathparameters"}}],[5,"noop_fold_angle_bracketed_parameter_data","","",null,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"t"}],"output":{"name":"anglebracketedparameterdata"}}],[5,"noop_fold_parenthesized_parameter_data","","",null,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"t"}],"output":{"name":"parenthesizedparameterdata"}}],[5,"noop_fold_local","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_mac","","",null,{"inputs":[{"name":"mac"},{"name":"t"}],"output":{"name":"mac"}}],[5,"noop_fold_meta_list_item","","",null,{"inputs":[{"name":"nestedmetaitem"},{"name":"t"}],"output":{"name":"nestedmetaitem"}}],[5,"noop_fold_meta_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_arg","","",null,{"inputs":[{"name":"arg"},{"name":"t"}],"output":{"name":"arg"}}],[5,"noop_fold_tt","","",null,{"inputs":[{"name":"tokentree"},{"name":"t"}],"output":{"name":"tokentree"}}],[5,"noop_fold_tts","","",null,null],[5,"noop_fold_token","","",null,{"inputs":[{"name":"token"},{"name":"t"}],"output":{"name":"token"}}],[5,"noop_fold_interpolated","","apply folder to elements of interpolated nodes",null,{"inputs":[{"name":"nonterminal"},{"name":"t"}],"output":{"name":"nonterminal"}}],[5,"noop_fold_fn_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty_param_bound","","",null,{"inputs":[{"name":"typarambound"},{"name":"t"}],"output":{"name":"typarambound"}}],[5,"noop_fold_ty_param","","",null,{"inputs":[{"name":"typaram"},{"name":"t"}],"output":{"name":"typaram"}}],[5,"noop_fold_ty_params","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_lifetime","","",null,{"inputs":[{"name":"lifetime"},{"name":"t"}],"output":{"name":"lifetime"}}],[5,"noop_fold_lifetime_def","","",null,{"inputs":[{"name":"lifetimedef"},{"name":"t"}],"output":{"name":"lifetimedef"}}],[5,"noop_fold_lifetimes","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_lifetime_defs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_opt_lifetime","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_generics","","",null,{"inputs":[{"name":"generics"},{"name":"t"}],"output":{"name":"generics"}}],[5,"noop_fold_where_clause","","",null,{"inputs":[{"name":"whereclause"},{"name":"t"}],"output":{"name":"whereclause"}}],[5,"noop_fold_where_predicate","","",null,{"inputs":[{"name":"wherepredicate"},{"name":"t"}],"output":{"name":"wherepredicate"}}],[5,"noop_fold_variant_data","","",null,{"inputs":[{"name":"variantdata"},{"name":"t"}],"output":{"name":"variantdata"}}],[5,"noop_fold_trait_ref","","",null,{"inputs":[{"name":"traitref"},{"name":"t"}],"output":{"name":"traitref"}}],[5,"noop_fold_poly_trait_ref","","",null,{"inputs":[{"name":"polytraitref"},{"name":"t"}],"output":{"name":"polytraitref"}}],[5,"noop_fold_struct_field","","",null,{"inputs":[{"name":"structfield"},{"name":"t"}],"output":{"name":"structfield"}}],[5,"noop_fold_field","","",null,{"inputs":[{"name":"field"},{"name":"t"}],"output":{"name":"field"}}],[5,"noop_fold_mt","","",null,{"inputs":[{"name":"mutty"},{"name":"t"}],"output":{"name":"mutty"}}],[5,"noop_fold_opt_bounds","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_block","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_item_kind","","",null,{"inputs":[{"name":"itemkind"},{"name":"t"}],"output":{"name":"itemkind"}}],[5,"noop_fold_trait_item","","",null,{"inputs":[{"name":"traititem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_impl_item","","",null,{"inputs":[{"name":"implitem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_mod","","",null,{"inputs":[{"name":"mod"},{"name":"t"}],"output":{"name":"mod"}}],[5,"noop_fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"t"}],"output":{"name":"crate"}}],[5,"noop_fold_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_item_simple","","",null,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"item"}}],[5,"noop_fold_foreign_item","","",null,{"inputs":[{"name":"foreignitem"},{"name":"t"}],"output":{"name":"foreignitem"}}],[5,"noop_fold_method_sig","","",null,{"inputs":[{"name":"methodsig"},{"name":"t"}],"output":{"name":"methodsig"}}],[5,"noop_fold_pat","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_expr","","",null,{"inputs":[{"name":"expr"},{"name":"t"}],"output":{"name":"expr"}}],[5,"noop_fold_opt_expr","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_exprs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_stmt","","",null,{"inputs":[{"name":"stmt"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_stmt_kind","","",null,{"inputs":[{"name":"stmtkind"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_vis","","",null,{"inputs":[{"name":"visibility"},{"name":"t"}],"output":{"name":"visibility"}}],[8,"Folder","","",null,null],[11,"fold_crate","","",134,null],[11,"fold_meta_items","","",134,null],[11,"fold_meta_list_item","","",134,null],[11,"fold_meta_item","","",134,null],[11,"fold_view_path","","",134,null],[11,"fold_foreign_item","","",134,null],[11,"fold_item","","",134,null],[11,"fold_item_simple","","",134,null],[11,"fold_struct_field","","",134,null],[11,"fold_item_kind","","",134,null],[11,"fold_trait_item","","",134,null],[11,"fold_impl_item","","",134,null],[11,"fold_fn_decl","","",134,null],[11,"fold_block","","",134,null],[11,"fold_stmt","","",134,null],[11,"fold_arm","","",134,null],[11,"fold_pat","","",134,null],[11,"fold_expr","","",134,null],[11,"fold_opt_expr","","",134,null],[11,"fold_exprs","","",134,null],[11,"fold_ty","","",134,null],[11,"fold_ty_binding","","",134,null],[11,"fold_mod","","",134,null],[11,"fold_foreign_mod","","",134,null],[11,"fold_variant","","",134,null],[11,"fold_ident","","",134,null],[11,"fold_usize","","",134,null],[11,"fold_path","","",134,null],[11,"fold_path_parameters","","",134,null],[11,"fold_angle_bracketed_parameter_data","","",134,null],[11,"fold_parenthesized_parameter_data","","",134,null],[11,"fold_local","","",134,null],[11,"fold_mac","","",134,null],[11,"fold_lifetime","","",134,null],[11,"fold_lifetime_def","","",134,null],[11,"fold_attribute","","",134,null],[11,"fold_arg","","",134,null],[11,"fold_generics","","",134,null],[11,"fold_trait_ref","","",134,null],[11,"fold_poly_trait_ref","","",134,null],[11,"fold_variant_data","","",134,null],[11,"fold_lifetimes","","",134,null],[11,"fold_lifetime_defs","","",134,null],[11,"fold_ty_param","","",134,null],[11,"fold_ty_params","","",134,null],[11,"fold_tt","","",134,null],[11,"fold_tts","","",134,null],[11,"fold_token","","",134,null],[11,"fold_interpolated","","",134,null],[11,"fold_opt_lifetime","","",134,null],[11,"fold_opt_bounds","","",134,null],[11,"fold_bounds","","",134,null],[11,"fold_ty_param_bound","","",134,null],[11,"fold_mt","","",134,null],[11,"fold_field","","",134,null],[11,"fold_where_clause","","",134,null],[11,"fold_where_predicate","","",134,null],[11,"fold_vis","","",134,null],[11,"new_id","","",134,null],[11,"new_span","","",134,null],[0,"parse","syntex_syntax","The main parser interface",null,null],[3,"ParseSess","syntex_syntax::parse","Info about a parsing session.",null,null],[12,"span_diagnostic","","",135,null],[12,"unstable_features","","",135,null],[5,"parse_crate_from_file","","",null,{"inputs":[{"name":"path"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_file","","",null,{"inputs":[{"name":"path"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_expr_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_item_from_source_str","","Parses an item.",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_meta_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_stmt_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_tts_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"new_parser_from_source_str","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"string"},{"name":"string"}],"output":{"name":"parser"}}],[5,"new_parser_from_file","","Create a new parser, handling errors as appropriate\nif the file doesn&#39;t exist",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"path"}],"output":{"name":"parser"}}],[5,"new_sub_parser_from_file","","Given a session, a crate config, a path, and a span, add\nthe file at the given path to the codemap, and return a parser.\nOn an error, use the given span as the source of the problem.",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"path"},{"name":"bool"},{"name":"option"},{"name":"span"}],"output":{"name":"parser"}}],[5,"filemap_to_parser","","Given a filemap and config, return a parser",null,{"inputs":[{"name":"parsesess"},{"name":"rc"},{"name":"crateconfig"}],"output":{"name":"parser"}}],[5,"new_parser_from_tts","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"vec"}],"output":{"name":"parser"}}],[5,"new_parser_from_ts","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"tokenstream"}],"output":{"name":"parser"}}],[5,"filemap_to_tts","","Given a filemap, produce a sequence of token-trees",null,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"vec"}}],[5,"tts_to_parser","","Given tts and cfg, produce a parser",null,{"inputs":[{"name":"parsesess"},{"name":"vec"},{"name":"crateconfig"}],"output":{"name":"parser"}}],[5,"char_lit","","Parse a string representing a character literal into its final form.\nRather than just accepting/rejecting a given literal, unescapes it as\nwell. Can take any slice prefixed by a character escape. Returns the\ncharacter and the number of characters consumed.",null,null],[5,"str_lit","","Parse a string representing a string literal into its final form. Does\nunescaping.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"raw_str_lit","","Parse a string representing a raw string literal into its final form. The\nonly operation this does is convert embedded CRLF into a single LF.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"float_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[5,"byte_lit","","Parse a string representing a byte literal into its final form. Similar to `char_lit`",null,null],[5,"byte_str_lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"rc"}}],[5,"integer_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[0,"parser","","",null,null],[3,"Restrictions","syntex_syntax::parse::parser","",null,null],[3,"Parser","","",null,null],[12,"sess","","",136,null],[12,"token","","the current token:",136,null],[12,"span","","the span of the current token:",136,null],[12,"prev_span","","the span of the previous token:",136,null],[12,"cfg","","",136,null],[12,"buffer","","",136,null],[12,"buffer_start","","",136,null],[12,"buffer_end","","",136,null],[12,"tokens_consumed","","",136,null],[12,"restrictions","","",136,null],[12,"quote_depth","","",136,null],[12,"reader","","",136,null],[12,"obsolete_set","","The set of seen errors about obsolete syntax. Used to suppress\nextra detail when the same error is seen twice",136,null],[12,"directory","","Used to determine the path to externally loaded source files",136,null],[12,"open_braces","","Stack of open delimiters and their spans. Used for error message.",136,null],[12,"owns_directory","","Flag if this parser &quot;owns&quot; the directory that it is currently parsing\nin. This will affect how nested files are looked up.",136,null],[12,"root_module_name","","Name of the root module this parser originated from. If `None`, then the\nname is not known. This does not change while the parser is descending\ninto modules, and sub-parsers have new values for this name.",136,null],[12,"expected_tokens","","",136,null],[3,"ModulePath","","Information about the path to a module.",null,null],[12,"name","","",137,null],[12,"path_exists","","",137,null],[12,"result","","",137,null],[3,"ModulePathSuccess","","",null,null],[12,"path","","",138,null],[12,"owns_directory","","",138,null],[3,"ModulePathError","","",null,null],[12,"err_msg","","",139,null],[12,"help_msg","","",139,null],[4,"PathStyle","","How to parse a path. There are three different kinds of paths, all of which\nare parsed somewhat differently.",null,null],[13,"Mod","","A path with no type parameters, e.g. `foo::bar::Baz`, used in imports or visibilities.",140,null],[13,"Type","","A path with a lifetime and type parameters, with no double colons\nbefore the type parameters; e.g. `foo::bar&lt;&#39;a&gt;::Baz&lt;T&gt;`, used in types.\nPaths using this style can be passed into macros expecting `path` nonterminals.",140,null],[13,"Expr","","A path with a lifetime and type parameters with double colons before\nthe type parameters; e.g. `foo::bar::&lt;&#39;a&gt;::Baz::&lt;T&gt;`, used in expressions or patterns.",140,null],[4,"BoundParsingMode","","How to parse a bound, whether to allow bound modifiers such as `?`.",null,null],[13,"Bare","","",141,null],[13,"Modified","","",141,null],[4,"SemiColonMode","","",null,null],[13,"Break","","",142,null],[13,"Ignore","","",142,null],[4,"TokenType","","",null,null],[13,"Token","","",143,null],[13,"Keyword","","",143,null],[13,"Operator","","",143,null],[4,"LhsExpr","","",null,null],[13,"NotYetParsed","","",144,null],[13,"AttributesParsed","","",144,null],[13,"AlreadyParsed","","",144,null],[17,"RESTRICTION_STMT_EXPR","","",null,null],[17,"RESTRICTION_NO_STRUCT_LITERAL","","",null,null],[17,"NO_NONINLINE_MOD","","",null,null],[11,"hash","","",145,null],[11,"cmp","","",145,null],[11,"partial_cmp","","",145,null],[11,"lt","","",145,null],[11,"le","","",145,null],[11,"gt","","",145,null],[11,"ge","","",145,null],[11,"clone","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"fmt","","",145,null],[11,"empty","","Returns an empty set of flags.",145,{"inputs":[],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",145,{"inputs":[],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",145,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",145,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",145,{"inputs":[{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",145,null],[11,"is_all","","Returns `true` if all flags are currently set.",145,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",145,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",145,null],[11,"insert","","Inserts the specified flags in-place.",145,null],[11,"remove","","Removes the specified flags in-place.",145,null],[11,"toggle","","Toggles the specified flags in-place.",145,null],[11,"bitor","","Returns the union of the two sets of flags.",145,null],[11,"bitor_assign","","Adds the set of flags.",145,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",145,null],[11,"bitxor_assign","","Toggles the set of flags.",145,null],[11,"bitand","","Returns the intersection between the two sets of flags.",145,null],[11,"bitand_assign","","Disables all flags disabled in the set.",145,null],[11,"sub","","Returns the set difference of the two sets of flags.",145,null],[11,"sub_assign","","Disables all flags enabled in the set.",145,null],[11,"not","","Returns the complement of this set of flags.",145,null],[11,"extend","","",145,null],[11,"from_iter","","",145,{"inputs":[{"name":"t"}],"output":{"name":"restrictions"}}],[11,"restriction_stmt_expr","","",145,{"inputs":[],"output":{"name":"self"}}],[11,"restriction_no_struct_literal","","",145,{"inputs":[],"output":{"name":"self"}}],[11,"no_noninline_mod","","",145,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",140,null],[11,"clone","","",140,null],[11,"eq","","",141,null],[11,"clone","","",141,null],[11,"eq","","",142,null],[11,"clone","","",142,null],[11,"clone","","",143,null],[11,"eq","","",143,null],[11,"ne","","",143,null],[11,"from","","",144,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",144,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"new","","",136,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"box"}],"output":{"name":"parser"}}],[11,"token_to_string","","Convert a token to a string using self&#39;s reader",136,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self&#39;s reader",136,null],[11,"this_token_descr","","",136,null],[11,"unexpected_last","","",136,null],[11,"unexpected","","",136,null],[11,"expect","","Expect and consume the token t. Signal an error if\nthe next token is not t.",136,null],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible,\nthen consume it; if inedible, then return without consuming\nanything.  Signal a fatal error if next token is unexpected.",136,null],[11,"parse_ident","","",136,null],[11,"check","","Check if the next token is `tok`, and return `true` if so.",136,null],[11,"eat","","Consume token &#39;tok&#39; if it exists. Returns true if the given\ntoken was present, false otherwise.",136,null],[11,"check_keyword","","",136,null],[11,"eat_keyword","","If the next token is the given keyword, eat it and return\ntrue. Otherwise, return false.",136,null],[11,"eat_keyword_noexpect","","",136,null],[11,"check_contextual_keyword","","",136,null],[11,"eat_contextual_keyword","","",136,null],[11,"expect_keyword","","If the given word is not a keyword, signal an error.\nIf the next token is not the given word, signal an error.\nOtherwise, eat it.",136,null],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",136,null],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",136,null],[11,"expect_no_suffix","","",136,null],[11,"expect_gt","","Expect and consume a GT. if a &gt;&gt; is seen, replace it\nwith a single &gt; and continue. If a GT is not seen,\nsignal an error.",136,null],[11,"parse_seq_to_before_gt_or_return","","",136,null],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by &#39;&lt;&#39; and &#39;&gt;&#39;, stopping\nbefore the &#39;&gt;&#39;.",136,null],[11,"parse_seq_to_gt","","",136,null],[11,"parse_seq_to_gt_or_return","","",136,null],[11,"eat_to_tokens","","Eat and discard tokens until one of `kets` is encountered. Respects token trees,\npasses through any errors encountered. Used for error recovery.",136,null],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",136,null],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",136,null],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",136,null],[11,"parse_seq","","",136,null],[11,"bump","","Advance the parser by one token",136,null],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",136,null],[11,"bump_with","","Advance the parser using provided token as a next one. Use this when\nconsuming a part of a token. For example a single `&lt;` from `&lt;&lt;`.",136,null],[11,"buffer_length","","",136,null],[11,"look_ahead","","",136,null],[11,"fatal","","",136,null],[11,"span_fatal","","",136,null],[11,"span_fatal_help","","",136,null],[11,"bug","","",136,null],[11,"warn","","",136,null],[11,"span_warn","","",136,null],[11,"span_err","","",136,null],[11,"span_err_help","","",136,null],[11,"span_bug","","",136,null],[11,"abort_if_errors","","",136,null],[11,"diagnostic","","",136,null],[11,"id_to_interned_str","","",136,null],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function\ntype?",136,null],[11,"get_lifetime","","",136,null],[11,"parse_for_in_type","","",136,null],[11,"parse_impl_trait_type","","",136,null],[11,"parse_ty_path","","",136,null],[11,"parse_ty_bare_fn","","parse a TyKind::BareFn type:",136,null],[11,"parse_unsafety","","",136,null],[11,"parse_trait_item","","Parse the items in a trait declaration",136,null],[11,"parse_trait_items","","Parse the items in a trait declaration",136,null],[11,"parse_mt","","Parse a possibly mutable type",136,null],[11,"parse_ret_ty","","Parse optional return type [ -&gt; TY ] in function decl",136,null],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",136,null],[11,"parse_ty","","Parse a type.",136,null],[11,"parse_borrowed_pointee","","",136,null],[11,"parse_ptr","","",136,null],[11,"is_named_argument","","",136,null],[11,"parse_arg_general","","This version of parse arg doesn&#39;t necessarily require\nidentifier names.",136,null],[11,"parse_arg","","Parse a single function argument",136,null],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",136,null],[11,"maybe_parse_fixed_length_of_vec","","",136,null],[11,"parse_lit_token","","Matches token_lit = LIT_INTEGER | ...",136,null],[11,"parse_lit","","Matches lit = true | false | token_lit",136,null],[11,"parse_pat_literal_maybe_minus","","matches &#39;-&#39; lit | lit",136,null],[11,"parse_path_segment_ident","","",136,null],[11,"parse_qualified_path","","Parses qualified path.",136,null],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the\nmode. The `mode` parameter determines whether lifetimes, types, and/or\nbounds are permitted and whether `::` must precede type parameter\ngroups.",136,null],[11,"parse_path_segments_without_colons","","Examples:\n- `a::b&lt;T,U&gt;::c&lt;V,W&gt;`\n- `a::b&lt;T,U&gt;::c(V) -&gt; W`\n- `a::b&lt;T,U&gt;::c(V)`",136,null],[11,"parse_path_segments_with_colons","","Examples:\n- `a::b::&lt;T,U&gt;::c`",136,null],[11,"parse_path_segments_without_types","","Examples:\n- `a::b::c`",136,null],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",136,null],[11,"parse_lifetime","","Parses a single lifetime\nMatches lifetime = LIFETIME",136,null],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { &#39;,&#39; lifetime_defs } ]` where `lifetime_def  =\nlifetime [&#39;:&#39; lifetimes]`",136,null],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty\none too, but putting that in there messes up the grammar....",136,null],[11,"parse_mutability","","Parse mutability (`mut` or nothing).",136,null],[11,"parse_field_name","","",136,null],[11,"parse_field","","Parse ident COLON expr",136,null],[11,"mk_expr","","",136,null],[11,"mk_unary","","",136,null],[11,"mk_binary","","",136,null],[11,"mk_call","","",136,null],[11,"mk_index","","",136,null],[11,"mk_range","","",136,null],[11,"mk_field","","",136,null],[11,"mk_tup_field","","",136,null],[11,"mk_assign_op","","",136,null],[11,"mk_mac_expr","","",136,null],[11,"mk_lit_u32","","",136,null],[11,"parse_block_expr","","Parse a block or unsafe block",136,null],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",136,null],[11,"parse_dot_or_call_expr_with","","",136,null],[11,"check_unknown_macro_variable","","",136,null],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style\nrepetition token (+ or *).",136,null],[11,"parse_token_tree","","parse a single token tree from the input.",136,null],[11,"parse_all_token_trees","","",136,null],[11,"parse_prefix_expr","","Parse a prefix-unary-operator expr",136,null],[11,"parse_assoc_expr","","Parse an associative expression",136,null],[11,"parse_assoc_expr_with","","Parse an associative expression with operators of at least `min_prec` precedence",136,null],[11,"parse_if_expr","","Parse an &#39;if&#39; or &#39;if let&#39; expression (&#39;if&#39; token already eaten)",136,null],[11,"parse_if_let_expr","","Parse an &#39;if let&#39; expression (&#39;if&#39; token already eaten)",136,null],[11,"parse_lambda_expr","","",136,null],[11,"parse_else_expr","","",136,null],[11,"parse_for_expr","","Parse a &#39;for&#39; .. &#39;in&#39; expression (&#39;for&#39; token already eaten)",136,null],[11,"parse_while_expr","","Parse a &#39;while&#39; or &#39;while let&#39; expression (&#39;while&#39; token already eaten)",136,null],[11,"parse_while_let_expr","","Parse a &#39;while let&#39; expression (&#39;while&#39; token already eaten)",136,null],[11,"parse_loop_expr","","",136,null],[11,"parse_arm","","",136,null],[11,"parse_expr","","Parse an expression",136,null],[11,"with_res","","Evaluate the closure with restrictions in place.",136,null],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",136,null],[11,"parse_pat","","Parse a pattern.",136,null],[11,"parse_stmt","","Parse a statement. This stops just before trailing semicolons on everything but items.\ne.g. a `StmtKind::Semi` parses to a `StmtKind::Expr`, leaving the trailing `;` unconsumed.",136,null],[11,"parse_block","","Parse a block. No inner attrs are allowed.",136,null],[11,"parse_full_stmt","","Parse a statement, including the trailing semicolon.",136,null],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where\nclauses are not parsed here, and must be added later via\n`parse_where_clause()`.",136,null],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",136,null],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",136,null],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",136,null],[11,"parse_fn_front_matter","","parses all the &quot;front matter&quot; for a `fn` declaration, up to\nand including the `fn` keyword:",136,null],[11,"parse_impl_item","","Parse an impl item.",136,null],[11,"parse_record_struct_body","","",136,null],[11,"parse_tuple_struct_body","","",136,null],[11,"parse_single_struct_field","","Parse a structure field declaration",136,null],[11,"submod_path_from_attr","","",136,null],[11,"default_submod_path","","Returns either a path to a module, or .",136,{"inputs":[{"name":"ident"},{"name":"path"},{"name":"codemap"}],"output":{"name":"modulepath"}}],[11,"parse_item","","",136,null],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main\nentry point for the parser.",136,null],[11,"parse_optional_str","","",136,null],[11,"parse_str","","",136,null],[0,"lexer","syntex_syntax::parse","",null,null],[3,"TokenAndSpan","syntex_syntax::parse::lexer","",null,null],[12,"tok","","",146,null],[12,"sp","","",146,null],[3,"StringReader","","",null,null],[12,"span_diagnostic","","",147,null],[12,"next_pos","","The absolute offset within the codemap of the next character to read",147,null],[12,"pos","","The absolute offset within the codemap of the current character",147,null],[12,"col","","The column of the next character to read",147,null],[12,"ch","","The current character (which has been read from self.pos)",147,null],[12,"filemap","","",147,null],[12,"terminator","","If Some, stop reading the source at this position (inclusive).",147,null],[12,"save_new_lines","","Whether to record new-lines in filemap. This is only necessary the first\ntime a filemap is lexed. If part of a filemap is being re-lexed, this\nshould be set to false.",147,null],[12,"peek_tok","","",147,null],[12,"peek_span","","",147,null],[12,"fatal_errs","","",147,null],[5,"is_pattern_whitespace","","",null,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_block_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"comments","","",null,null],[3,"Comment","syntex_syntax::parse::lexer::comments","",null,null],[12,"style","","",148,null],[12,"lines","","",148,null],[12,"pos","","",148,null],[3,"Literal","","",null,null],[12,"lit","","",149,null],[12,"pos","","",149,null],[4,"CommentStyle","","",null,null],[13,"Isolated","","No code on either side of each line of the comment",150,null],[13,"Trailing","","Code exists to the left of the comment",150,null],[13,"Mixed","","Code before /* foo */ and after the comment",150,null],[13,"BlankLine","","Just a manual blank line &quot;\\n\\n&quot;, for layout",150,null],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"doc_comment_style","","",null,{"inputs":[{"name":"str"}],"output":{"name":"attrstyle"}}],[5,"strip_doc_comment_decoration","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"gather_comments_and_literals","","",null,null],[11,"fmt","","",150,null],[11,"eq","","",150,null],[11,"clone","","",150,null],[11,"clone","","",148,null],[11,"clone","","",149,null],[8,"Reader","syntex_syntax::parse::lexer","",null,null],[10,"is_eof","","",151,null],[10,"try_next_token","","",151,null],[11,"next_token","","",151,null],[10,"fatal","","Report a fatal error with the current span.",151,null],[10,"err","","Report a non-fatal error with the current span.",151,null],[10,"emit_fatal_errors","","",151,null],[11,"unwrap_or_abort","","",151,null],[10,"peek","","",151,null],[11,"try_real_token","","Get a token the parser cares about.",151,null],[11,"real_token","","",151,null],[11,"fmt","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"clone","","",146,null],[11,"is_eof","","",147,null],[11,"try_next_token","","Return the next token. EFFECT: advances the string_reader.",147,null],[11,"fatal","","",147,null],[11,"err","","",147,null],[11,"emit_fatal_errors","","",147,null],[11,"peek","","",147,null],[11,"new_raw","","For comments.rs, which hackily pokes into next_pos and ch",147,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"new","","",147,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"ch_is","","",147,null],[11,"fatal_span","","Report a fatal lexical error with a given span.",147,null],[11,"err_span","","Report a lexical error with a given span.",147,null],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start`\nup to but excluding `self.pos`, meaning the slice does not include\nthe character `self.ch`.",147,null],[11,"name_from","","Create a Name from a given offset to the current offset, each\nadjusted 1 towards each other (assumes that on either side there is a\nsingle-byte delimiter).",147,null],[11,"name_from_to","","As name_from, with an explicit endpoint.",147,null],[11,"bump","","Advance the StringReader by one character. If a newline is\ndiscovered, add it to the FileMap&#39;s list of line start offsets.",147,null],[11,"nextch","","",147,null],[11,"nextch_is","","",147,null],[11,"nextnextch","","",147,null],[11,"nextnextch_is","","",147,null],[0,"token","syntex_syntax::parse","",null,null],[3,"InternedString","syntex_syntax::parse::token","Represents a string stored in the thread-local interner. Because the\ninterner lives for the life of the thread, this can be safely treated as an\nimmortal string, as long as it never crosses between threads.",null,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",152,null],[13,"Minus","","",152,null],[13,"Star","","",152,null],[13,"Slash","","",152,null],[13,"Percent","","",152,null],[13,"Caret","","",152,null],[13,"And","","",152,null],[13,"Or","","",152,null],[13,"Shl","","",152,null],[13,"Shr","","",152,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",153,null],[13,"Bracket","","A square bracket: `[` or `]`",153,null],[13,"Brace","","A curly brace: `{` or `}`",153,null],[13,"NoDelim","","An empty delimiter",153,null],[4,"Lit","","",null,null],[13,"Byte","","",154,null],[13,"Char","","",154,null],[13,"Integer","","",154,null],[13,"Float","","",154,null],[13,"Str_","","",154,null],[13,"StrRaw","","",154,null],[13,"ByteStr","","",154,null],[13,"ByteStrRaw","","",154,null],[4,"Token","","",null,null],[13,"Eq","","",155,null],[13,"Lt","","",155,null],[13,"Le","","",155,null],[13,"EqEq","","",155,null],[13,"Ne","","",155,null],[13,"Ge","","",155,null],[13,"Gt","","",155,null],[13,"AndAnd","","",155,null],[13,"OrOr","","",155,null],[13,"Not","","",155,null],[13,"Tilde","","",155,null],[13,"BinOp","","",155,null],[13,"BinOpEq","","",155,null],[13,"At","","",155,null],[13,"Dot","","",155,null],[13,"DotDot","","",155,null],[13,"DotDotDot","","",155,null],[13,"Comma","","",155,null],[13,"Semi","","",155,null],[13,"Colon","","",155,null],[13,"ModSep","","",155,null],[13,"RArrow","","",155,null],[13,"LArrow","","",155,null],[13,"FatArrow","","",155,null],[13,"Pound","","",155,null],[13,"Dollar","","",155,null],[13,"Question","","",155,null],[13,"OpenDelim","","An opening delimiter, eg. `{`",155,null],[13,"CloseDelim","","A closing delimiter, eg. `}`",155,null],[13,"Literal","","",155,null],[13,"Ident","","",155,null],[13,"Underscore","","",155,null],[13,"Lifetime","","",155,null],[13,"Interpolated","","",155,null],[13,"DocComment","","Doc comment",155,null],[13,"MatchNt","","Parse a nonterminal (name to bind, name of NT)",155,null],[13,"SubstNt","","A syntactic variable that will be filled in by macro expansion.",155,null],[13,"Whitespace","","Whitespace",155,null],[13,"Comment","","Comment",155,null],[13,"Shebang","","",155,null],[13,"Eof","","",155,null],[4,"Nonterminal","","For interpolation during macro expansion.",null,null],[13,"NtItem","","",156,null],[13,"NtBlock","","",156,null],[13,"NtStmt","","",156,null],[13,"NtPat","","",156,null],[13,"NtExpr","","",156,null],[13,"NtTy","","",156,null],[13,"NtIdent","","",156,null],[13,"NtMeta","","Stuff inside brackets for attributes",156,null],[13,"NtPath","","",156,null],[13,"NtTT","","",156,null],[13,"NtArm","","",156,null],[13,"NtImplItem","","",156,null],[13,"NtTraitItem","","",156,null],[13,"NtGenerics","","",156,null],[13,"NtWhereClause","","",156,null],[13,"NtArg","","",156,null],[5,"with_ident_interner","","",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[5,"reset_ident_interner","","Reset the ident interner to its initial state.",null,{"inputs":[],"output":null}],[5,"clear_ident_interner","","",null,{"inputs":[],"output":null}],[5,"intern_and_get_ident","","Interns and returns the string contents of an identifier, using the\nthread-local interner.",null,{"inputs":[{"name":"str"}],"output":{"name":"internedstring"}}],[5,"intern","","Maps a string to its interned representation.",null,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[5,"gensym","","gensym&#39;s a new usize, using the current interner.",null,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[5,"str_to_ident","","Maps a string to an identifier with an empty syntax context.",null,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[5,"gensym_ident","","Maps a string to a gensym&#39;ed identifier.",null,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[5,"fresh_name","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"name"}}],[0,"keywords","","",null,null],[3,"Keyword","syntex_syntax::parse::token::keywords","",null,null],[17,"Invalid","","",null,null],[17,"As","","",null,null],[17,"Box","","",null,null],[17,"Break","","",null,null],[17,"Const","","",null,null],[17,"Continue","","",null,null],[17,"Crate","","",null,null],[17,"Else","","",null,null],[17,"Enum","","",null,null],[17,"Extern","","",null,null],[17,"False","","",null,null],[17,"Fn","","",null,null],[17,"For","","",null,null],[17,"If","","",null,null],[17,"Impl","","",null,null],[17,"In","","",null,null],[17,"Let","","",null,null],[17,"Loop","","",null,null],[17,"Match","","",null,null],[17,"Mod","","",null,null],[17,"Move","","",null,null],[17,"Mut","","",null,null],[17,"Pub","","",null,null],[17,"Ref","","",null,null],[17,"Return","","",null,null],[17,"SelfValue","","",null,null],[17,"SelfType","","",null,null],[17,"Static","","",null,null],[17,"Struct","","",null,null],[17,"Super","","",null,null],[17,"Trait","","",null,null],[17,"True","","",null,null],[17,"Type","","",null,null],[17,"Unsafe","","",null,null],[17,"Use","","",null,null],[17,"Where","","",null,null],[17,"While","","",null,null],[17,"Abstract","","",null,null],[17,"Alignof","","",null,null],[17,"Become","","",null,null],[17,"Do","","",null,null],[17,"Final","","",null,null],[17,"Macro","","",null,null],[17,"Offsetof","","",null,null],[17,"Override","","",null,null],[17,"Priv","","",null,null],[17,"Proc","","",null,null],[17,"Pure","","",null,null],[17,"Sizeof","","",null,null],[17,"Typeof","","",null,null],[17,"Unsized","","",null,null],[17,"Virtual","","",null,null],[17,"Yield","","",null,null],[17,"Default","","",null,null],[17,"StaticLifetime","","",null,null],[17,"Union","","",null,null],[11,"eq","","",157,null],[11,"ne","","",157,null],[11,"clone","","",157,null],[11,"ident","","",157,null],[11,"name","","",157,null],[6,"IdentInterner","syntex_syntax::parse::token","",null,null],[11,"fmt","","",152,null],[11,"hash","","",152,null],[11,"eq","","",152,null],[11,"decode","","",152,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",152,null],[11,"clone","","",152,null],[11,"fmt","","",153,null],[11,"hash","","",153,null],[11,"eq","","",153,null],[11,"decode","","",153,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",153,null],[11,"clone","","",153,null],[11,"fmt","","",154,null],[11,"hash","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"decode","","",154,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",154,null],[11,"clone","","",154,null],[11,"short_name","","",154,null],[11,"fmt","","",155,null],[11,"hash","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"decode","","",155,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",155,null],[11,"clone","","",155,null],[11,"is_like_gt","","Returns `true` if the token starts with &#39;&gt;&#39;.",155,null],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",155,null],[11,"is_lit","","Returns `true` if the token is any literal",155,null],[11,"is_ident","","Returns `true` if the token is an identifier.",155,null],[11,"is_doc_comment","","Returns `true` if the token is a documentation comment.",155,null],[11,"is_interpolated","","Returns `true` if the token is interpolated.",155,null],[11,"is_path","","Returns `true` if the token is an interpolated path.",155,null],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",155,null],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",155,null],[11,"is_path_start","","",155,null],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",155,null],[11,"is_path_segment_keyword","","",155,null],[11,"is_any_keyword","","Returns `true` if the token is either a strict or reserved keyword.",155,null],[11,"is_strict_keyword","","Returns `true` if the token is a strict keyword.",155,null],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword reserved for possible future use.",155,null],[11,"hash","","",156,null],[11,"eq","","",156,null],[11,"ne","","",156,null],[11,"decode","","",156,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",156,null],[11,"cmp","","",158,null],[11,"partial_cmp","","",158,null],[11,"lt","","",158,null],[11,"le","","",158,null],[11,"gt","","",158,null],[11,"ge","","",158,null],[11,"hash","","",158,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"clone","","",158,null],[11,"new","","",158,{"inputs":[{"name":"str"}],"output":{"name":"internedstring"}}],[11,"new_from_name","","",158,{"inputs":[{"name":"name"}],"output":{"name":"internedstring"}}],[11,"deref","","",158,null],[11,"fmt","","",158,null],[11,"fmt","","",158,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"decode","","",158,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",158,null],[0,"attr","syntex_syntax::parse","",null,null],[11,"parse_outer_attributes","syntex_syntax::parse::parser","Parse attributes that appear before an item",136,null],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",136,null],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should\nbe preceded by an exclamation mark, but we accept and warn about one\nterminated by a semicolon.\nmatches inner_attrs*",136,null],[11,"parse_meta_item","","Per RFC#1559, matches the following grammar:",136,null],[0,"common","syntex_syntax::parse","Common routines shared by parser mods",null,null],[3,"SeqSep","syntex_syntax::parse::common","SeqSep : a sequence separator (token)\nand whether a trailing separator is allowed.",null,null],[12,"sep","","",159,null],[12,"trailing_sep_allowed","","",159,null],[11,"trailing_allowed","","",159,{"inputs":[{"name":"token"}],"output":{"name":"seqsep"}}],[11,"none","","",159,{"inputs":[],"output":{"name":"seqsep"}}],[0,"classify","syntex_syntax::parse","Routines the parser uses to classify AST nodes",null,null],[5,"expr_requires_semi_to_be_stmt","syntex_syntax::parse::classify","Does this expression require a semicolon to be treated\nas a statement? The negation of this: &#39;can this expression\nbe used as a statement without a semicolon&#39; -- is used\nas an early-bail-out in the parser so that, for instance,\n    if true {...} else {...}\n     |x| 5\nisn&#39;t parsed as (if true {...} else {...} | x) | 5",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"expr_is_simple_block","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"stmt_ends_with_semi","","this statement requires a semicolon after it.\nnote that in one case (stmt_semi), we&#39;ve already\nseen the semicolon, and thus don&#39;t need another.",null,{"inputs":[{"name":"stmtkind"}],"output":{"name":"bool"}}],[0,"obsolete","syntex_syntax::parse","Support for parsing unsupported, old syntaxes, for the purpose of reporting errors. Parsing of\nthese syntaxes is tested by compile-test/obsolete-syntax.rs.",null,null],[4,"ObsoleteSyntax","syntex_syntax::parse::obsolete","The specific types of unsupported syntax",null,null],[8,"ParserObsoleteMethods","","",null,null],[10,"obsolete","","Reports an obsolete syntax non-fatal error.",160,null],[10,"report","","",160,null],[11,"hash","","",161,null],[11,"eq","","",161,null],[11,"clone","","",161,null],[11,"obsolete","syntex_syntax::parse::parser","Reports an obsolete syntax non-fatal error.",136,null],[11,"report","","",136,null],[6,"PResult","syntex_syntax::parse","",null,null],[11,"new","","",135,{"inputs":[],"output":{"name":"parsesess"}}],[11,"with_span_handler","","",135,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"parsesess"}}],[11,"codemap","","",135,null],[0,"ptr","syntex_syntax","The AST pointer",null,null],[3,"P","syntex_syntax::ptr","An owned smart pointer.",null,null],[5,"P","","Construct a `P&lt;T&gt;` from a `T` value.",null,{"inputs":[{"name":"t"}],"output":{"name":"p"}}],[11,"cmp","","",162,null],[11,"partial_cmp","","",162,null],[11,"lt","","",162,null],[11,"le","","",162,null],[11,"gt","","",162,null],[11,"ge","","",162,null],[11,"eq","","",162,null],[11,"ne","","",162,null],[11,"hash","","",162,null],[11,"and_then","","Move out of the pointer.\nIntended for chaining transformations not covered by `map`.",162,null],[11,"unwrap","","Equivalent to and_then(|x| x)",162,null],[11,"map","","Transform the inner value, consuming `self` and producing a new `P&lt;T&gt;`.",162,null],[11,"deref","","",162,null],[11,"clone","","",162,null],[11,"fmt","","",162,null],[11,"fmt","","",162,null],[11,"fmt","","",162,null],[11,"decode","","",162,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",162,null],[11,"new","","",162,{"inputs":[],"output":{"name":"p"}}],[11,"from_vec","","",162,{"inputs":[{"name":"vec"}],"output":{"name":"p"}}],[11,"into_vec","","",162,null],[11,"default","","Creates an empty `P&lt;[T]&gt;`.",162,{"inputs":[],"output":{"name":"p"}}],[11,"clone","","",162,null],[11,"from","","",162,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",162,null],[11,"from_iter","","",162,{"inputs":[{"name":"i"}],"output":{"name":"p"}}],[11,"into_iter","","",162,null],[11,"encode","","",162,null],[11,"decode","","",162,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"show_span","syntex_syntax","Span debugger",null,null],[5,"run","syntex_syntax::show_span","",null,{"inputs":[{"name":"handler"},{"name":"str"},{"name":"crate"}],"output":null}],[0,"std_inject","syntex_syntax","",null,null],[5,"injected_crate_name","syntex_syntax::std_inject","",null,{"inputs":[{"name":"crate"}],"output":{"name":"option"}}],[5,"maybe_inject_crates_ref","","",null,{"inputs":[{"name":"parsesess"},{"name":"crate"},{"name":"option"}],"output":{"name":"crate"}}],[0,"str","syntex_syntax","",null,null],[5,"char_at","syntex_syntax::str","",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"char"}}],[5,"slice_shift_char","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"test","syntex_syntax","",null,null],[5,"modify_for_testing","syntex_syntax::test","",null,{"inputs":[{"name":"parsesess"},{"name":"resolver"},{"name":"bool"},{"name":"crate"},{"name":"handler"}],"output":{"name":"crate"}}],[0,"tokenstream","syntex_syntax","# Token Streams",null,null],[3,"Delimited","syntex_syntax::tokenstream","A delimited sequence of token trees",null,null],[12,"delim","","The type of delimiter",163,null],[12,"open_span","","The span covering the opening delimiter",163,null],[12,"tts","","The delimited sequence of token trees",163,null],[12,"close_span","","The span covering the closing delimiter",163,null],[3,"SequenceRepetition","","A sequence of token trees",null,null],[12,"tts","","The sequence of token trees",164,null],[12,"separator","","The optional separator",164,null],[12,"op","","Whether the sequence can be repeated zero (*), or one or more times (+)",164,null],[12,"num_captures","","The number of `MatchNt`s that appear in the sequence (and subsequences)",164,null],[3,"TokenStream","","#Token Streams",null,null],[3,"Iter","","",null,null],[3,"Split","","",null,null],[4,"KleeneOp","","A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\nfor token sequences.",null,null],[13,"ZeroOrMore","","",165,null],[13,"OneOrMore","","",165,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it\nparses the arguments to the invocation as a token-tree. This is a very\nloose structure, such that all sorts of different AST-fragments can\nbe passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",166,null],[13,"Delimited","","A delimited sequence of token trees",166,null],[13,"Sequence","","A kleene-style repetition sequence with a span",166,null],[4,"InternalTS","","",null,null],[13,"Empty","","",167,null],[13,"Leaf","","",167,null],[12,"tts","syntex_syntax::tokenstream::InternalTS","",167,null],[12,"offset","","",167,null],[12,"len","","",167,null],[12,"sp","","",167,null],[13,"Node","syntex_syntax::tokenstream","",167,null],[12,"left","syntex_syntax::tokenstream::InternalTS","",167,null],[12,"right","","",167,null],[12,"len","","",167,null],[12,"sp","","",167,null],[11,"fmt","syntex_syntax::tokenstream","",163,null],[11,"hash","","",163,null],[11,"decode","","",163,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"clone","","",163,null],[11,"open_token","","Returns the opening delimiter as a token.",163,null],[11,"close_token","","Returns the closing delimiter as a token.",163,null],[11,"open_tt","","Returns the opening delimiter as a token tree.",163,null],[11,"close_tt","","Returns the closing delimiter as a token tree.",163,null],[11,"subtrees","","Returns the token trees inside the delimiters.",163,null],[11,"fmt","","",164,null],[11,"hash","","",164,null],[11,"decode","","",164,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"clone","","",164,null],[11,"fmt","","",165,null],[11,"hash","","",165,null],[11,"decode","","",165,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",165,null],[11,"eq","","",165,null],[11,"clone","","",165,null],[11,"hash","","",166,null],[11,"decode","","",166,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",166,null],[11,"eq","","",166,null],[11,"ne","","",166,null],[11,"clone","","",166,null],[11,"fmt","","",166,null],[11,"len","","",166,null],[11,"get_tt","","",166,null],[11,"get_span","","Returns the `Span` corresponding to this token tree.",166,null],[11,"parse","","Use this token tree as a matcher to parse given tts.",166,null],[11,"eq_unspanned","","Check if this TokenTree is equal to the other, regardless of span information.",166,null],[11,"span","","Retrieve the TokenTree&#39;s span.",166,null],[11,"eq_token","","Indicates if the stream is a token that is equal to the provided token.",166,null],[11,"is_ident","","Indicates if the token is an identifier.",166,null],[11,"maybe_ident","","Returns an identifier.",166,null],[11,"maybe_lit","","Returns a Token literal.",166,null],[11,"maybe_str","","Returns an AST string literal.",166,null],[11,"decode","","",168,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",168,null],[11,"hash","","",168,null],[11,"clone","","",168,null],[11,"decode","","",167,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",167,null],[11,"hash","","",167,null],[11,"eq","","",167,null],[11,"ne","","",167,null],[11,"clone","","",167,null],[11,"fmt","","",168,null],[11,"fmt","","",167,null],[11,"eq","","",168,null],[11,"mk_empty","","",168,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"from_tts","","Convert a vector of `TokenTree`s into a `TokenStream`.",168,{"inputs":[{"name":"vec"}],"output":{"name":"tokenstream"}}],[11,"from_tokens","","Convert a vector of Tokens into a TokenStream.",168,{"inputs":[{"name":"vec"}],"output":{"name":"tokenstream"}}],[11,"respan","","Manually change a TokenStream&#39;s span.",168,null],[11,"concat","","Concatenates two TokenStreams into a new TokenStream.",168,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"is_empty","","Indicate if the TokenStream is empty.",168,null],[11,"len","","Return a TokenStream&#39;s length.",168,null],[11,"to_vec","","Convert a TokenStream into a vector of borrowed TokenTrees.",168,null],[11,"to_tts","","Convert a TokenStream into a vector of TokenTrees (by cloning the TokenTrees).\n(This operation is an O(n) deep copy of the underlying structure.)",168,null],[11,"span","","Return the TokenStream&#39;s span.",168,null],[11,"iter","","Returns an iterator over a TokenStream (as a sequence of TokenTrees).",168,null],[11,"split","","Splits a TokenStream based on the provided `&amp;TokenTree -&gt; bool` predicate.",168,null],[11,"slice","","Produce a slice of the input TokenStream from the `from` index, inclusive, to the\n`to` index, non-inclusive.",168,null],[11,"slice_from","","Slice starting at the provided index, inclusive.",168,null],[11,"slice_to","","Slice up to the provided index, non-inclusive.",168,null],[11,"is_delimited","","Indicates where the stream is a single, delimited expression (e.g., `(a,b,c)` or\n`{a,b,c}`).",168,null],[11,"maybe_delimited","","Returns the inside of the delimited term as a new TokenStream.",168,null],[11,"is_ident","","Indicates if the stream is exactly one identifier.",168,null],[11,"maybe_ident","","Returns an identifier",168,null],[11,"eq_unspanned","","Compares two TokenStreams, checking equality without regarding span information.",168,null],[11,"as_delimited_stream","","Convert a vector of TokenTrees into a parentheses-delimited TokenStream.",168,{"inputs":[{"name":"vec"},{"name":"delimtoken"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",168,null],[11,"next","","",169,null],[11,"next","","",170,null],[11,"index","","",168,null],[11,"index","","",167,null],[0,"visit","syntex_syntax","AST walker. Each overridden visit method has full control over what\nhappens with its node, it can do its own traversal of the node&#39;s children,\ncall `visit::walk_*` to apply the default traversal algorithm, or prevent\ndeeper traversal by doing nothing.",null,null],[4,"FnKind","syntex_syntax::visit","",null,null],[13,"ItemFn","","fn foo() or extern &quot;Abi&quot; fn foo()",171,null],[13,"Method","","fn foo(&amp;self)",171,null],[13,"Closure","","|x, y| {}",171,null],[5,"walk_opt_name","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_sp_ident","","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"ident"}],"output":null}],[5,"walk_crate","","",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_macro_def","","",null,{"inputs":[{"name":"v"},{"name":"macrodef"}],"output":null}],[5,"walk_mod","","",null,{"inputs":[{"name":"v"},{"name":"mod"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"traitref"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_enum_def","","",null,{"inputs":[{"name":"v"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_list_item","","",null,{"inputs":[{"name":"v"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn_kind","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"}],"output":null}],[5,"walk_fn","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_struct_def","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_struct_field","","",null,{"inputs":[{"name":"v"},{"name":"structfield"}],"output":null}],[5,"walk_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"walk_vis","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially\noverridden.  Each method&#39;s default implementation recursively visits\nthe substructure of the input via the corresponding `walk` method;\ne.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_name","","",172,null],[11,"visit_ident","","",172,null],[11,"visit_mod","","",172,null],[11,"visit_foreign_item","","",172,null],[11,"visit_item","","",172,null],[11,"visit_local","","",172,null],[11,"visit_block","","",172,null],[11,"visit_stmt","","",172,null],[11,"visit_arm","","",172,null],[11,"visit_pat","","",172,null],[11,"visit_expr","","",172,null],[11,"visit_expr_post","","",172,null],[11,"visit_ty","","",172,null],[11,"visit_generics","","",172,null],[11,"visit_fn","","",172,null],[11,"visit_trait_item","","",172,null],[11,"visit_impl_item","","",172,null],[11,"visit_trait_ref","","",172,null],[11,"visit_ty_param_bound","","",172,null],[11,"visit_poly_trait_ref","","",172,null],[11,"visit_variant_data","","",172,null],[11,"visit_struct_field","","",172,null],[11,"visit_enum_def","","",172,null],[11,"visit_variant","","",172,null],[11,"visit_lifetime","","",172,null],[11,"visit_lifetime_def","","",172,null],[11,"visit_mac","","",172,null],[11,"visit_path","","",172,null],[11,"visit_path_list_item","","",172,null],[11,"visit_path_segment","","",172,null],[11,"visit_path_parameters","","",172,null],[11,"visit_assoc_type_binding","","",172,null],[11,"visit_attribute","","",172,null],[11,"visit_macro_def","","",172,null],[11,"visit_vis","","",172,null],[11,"visit_fn_ret_ty","","",172,null],[11,"eq","","",171,null],[11,"ne","","",171,null],[11,"clone","","",171,null],[0,"print","syntex_syntax","",null,null],[0,"pp","syntex_syntax::print","This pretty-printer is a direct reimplementation of Philip Karlton&#39;s\nMesa pretty-printer, as described in appendix A of",null,null],[3,"BreakToken","syntex_syntax::print::pp","",null,null],[3,"BeginToken","","",null,null],[3,"PrintStackElem","","",null,null],[3,"Printer","","In case you do not have the paper, here is an explanation of what&#39;s going\non.",null,null],[12,"out","","",173,null],[4,"Breaks","","",null,null],[13,"Consistent","","",174,null],[13,"Inconsistent","","",174,null],[4,"Token","","",null,null],[13,"String","","",175,null],[13,"Break","","",175,null],[13,"Begin","","",175,null],[13,"End","","",175,null],[13,"Eof","","",175,null],[4,"PrintStackBreak","","",null,null],[13,"Fits","","",176,null],[13,"Broken","","",176,null],[5,"mk_printer","","",null,{"inputs":[{"name":"box"},{"name":"usize"}],"output":{"name":"printer"}}],[5,"rbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[5,"ibox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"cbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"break_offset","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[5,"end","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"eof","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"huge_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"zero_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"spaces","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"zerobreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"space","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak_tok_offset","","",null,{"inputs":[{"name":"isize"}],"output":{"name":"token"}}],[5,"hardbreak_tok","","",null,{"inputs":[],"output":{"name":"token"}}],[11,"eq","","",174,null],[11,"clone","","",174,null],[11,"clone","","",177,null],[11,"clone","","",178,null],[11,"clone","","",175,null],[11,"is_eof","","",175,null],[11,"is_hardbreak_tok","","",175,null],[11,"fmt","","",175,null],[11,"clone","","",176,null],[11,"clone","","",179,null],[11,"last_token","","",173,null],[11,"replace_last_token","","",173,null],[11,"pretty_print","","",173,null],[11,"check_stream","","",173,null],[11,"scan_push","","",173,null],[11,"scan_pop","","",173,null],[11,"scan_top","","",173,null],[11,"scan_pop_bottom","","",173,null],[11,"advance_right","","",173,null],[11,"advance_left","","",173,null],[11,"check_stack","","",173,null],[11,"print_newline","","",173,null],[11,"indent","","",173,null],[11,"get_top","","",173,null],[11,"print_str","","",173,null],[11,"print","","",173,null],[0,"pprust","syntex_syntax::print","",null,null],[3,"NoAnn","syntex_syntax::print::pprust","",null,null],[3,"CurrentCommentAndLiteral","","",null,null],[12,"cur_cmnt","","",180,null],[12,"cur_lit","","",180,null],[3,"State","","",null,null],[12,"s","","",181,null],[4,"AnnNode","","",null,null],[13,"NodeIdent","","",182,null],[13,"NodeName","","",182,null],[13,"NodeBlock","","",182,null],[13,"NodeItem","","",182,null],[13,"NodeSubItem","","",182,null],[13,"NodeExpr","","",182,null],[13,"NodePat","","",182,null],[5,"rust_printer","","",null,{"inputs":[{"name":"box"}],"output":{"name":"state"}}],[5,"rust_printer_annotated","","",null,{"inputs":[{"name":"box"},{"name":"ppann"}],"output":{"name":"state"}}],[5,"print_crate","","Requires you to pass an input filename and reader so that\nit can scan the input text for comments and literals to\ncopy forward.",null,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"string"}}],[5,"binop_to_string","","",null,{"inputs":[{"name":"binoptoken"}],"output":{"name":"str"}}],[5,"token_to_string","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"ty_to_string","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"string"}}],[5,"bounds_to_string","","",null,null],[5,"pat_to_string","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"string"}}],[5,"arm_to_string","","",null,{"inputs":[{"name":"arm"}],"output":{"name":"string"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"string"}}],[5,"lifetime_to_string","","",null,{"inputs":[{"name":"lifetime"}],"output":{"name":"string"}}],[5,"tt_to_string","","",null,{"inputs":[{"name":"tokentree"}],"output":{"name":"string"}}],[5,"tts_to_string","","",null,null],[5,"stmt_to_string","","",null,{"inputs":[{"name":"stmt"}],"output":{"name":"string"}}],[5,"attr_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"item_to_string","","",null,{"inputs":[{"name":"item"}],"output":{"name":"string"}}],[5,"impl_item_to_string","","",null,{"inputs":[{"name":"implitem"}],"output":{"name":"string"}}],[5,"trait_item_to_string","","",null,{"inputs":[{"name":"traititem"}],"output":{"name":"string"}}],[5,"generics_to_string","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"string"}}],[5,"where_clause_to_string","","",null,{"inputs":[{"name":"whereclause"}],"output":{"name":"string"}}],[5,"fn_block_to_string","","",null,{"inputs":[{"name":"fndecl"}],"output":{"name":"string"}}],[5,"path_to_string","","",null,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[5,"ident_to_string","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"string"}}],[5,"fun_to_string","","",null,{"inputs":[{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"ident"},{"name":"generics"}],"output":{"name":"string"}}],[5,"block_to_string","","",null,{"inputs":[{"name":"block"}],"output":{"name":"string"}}],[5,"meta_list_item_to_string","","",null,{"inputs":[{"name":"nestedmetaitem"}],"output":{"name":"string"}}],[5,"meta_item_to_string","","",null,{"inputs":[{"name":"metaitem"}],"output":{"name":"string"}}],[5,"attribute_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"lit_to_string","","",null,{"inputs":[{"name":"lit"}],"output":{"name":"string"}}],[5,"variant_to_string","","",null,{"inputs":[{"name":"variant"}],"output":{"name":"string"}}],[5,"arg_to_string","","",null,{"inputs":[{"name":"arg"}],"output":{"name":"string"}}],[5,"mac_to_string","","",null,{"inputs":[{"name":"mac"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[17,"INDENT_UNIT","","",null,null],[17,"DEFAULT_COLUMNS","","",null,null],[8,"PpAnn","","",null,null],[11,"pre","","",183,null],[11,"post","","",183,null],[8,"PrintState","","",null,null],[10,"writer","","",184,null],[10,"boxes","","",184,null],[10,"comments","","",184,null],[10,"cur_cmnt_and_lit","","",184,null],[10,"literals","","",184,null],[11,"word_space","","",184,null],[11,"popen","","",184,null],[11,"pclose","","",184,null],[11,"is_begin","","",184,null],[11,"is_end","","",184,null],[11,"is_bol","","",184,null],[11,"hardbreak_if_not_bol","","",184,null],[11,"rbox","","",184,null],[11,"ibox","","",184,null],[11,"end","","",184,null],[11,"commasep","","",184,null],[11,"next_lit","","",184,null],[11,"maybe_print_comment","","",184,null],[11,"print_comment","","",184,null],[11,"next_comment","","",184,null],[11,"print_literal","","",184,null],[11,"print_string","","",184,null],[11,"print_inner_attributes","","",184,null],[11,"print_inner_attributes_no_trailing_hardbreak","","",184,null],[11,"print_outer_attributes","","",184,null],[11,"print_inner_attributes_inline","","",184,null],[11,"print_outer_attributes_inline","","",184,null],[11,"print_either_attributes","","",184,null],[11,"print_attribute","","",184,null],[11,"print_attribute_inline","","",184,null],[11,"print_meta_list_item","","",184,null],[11,"print_meta_item","","",184,null],[11,"space_if_not_bol","","",184,null],[11,"nbsp","","",184,null],[11,"clone","","",185,null],[11,"clone","","",180,null],[11,"new_from_input","","",181,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",181,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"writer","","",181,null],[11,"boxes","","",181,null],[11,"comments","","",181,null],[11,"cur_cmnt_and_lit","","",181,null],[11,"literals","","",181,null],[11,"cbox","","",181,null],[11,"word_nbsp","","",181,null],[11,"head","","",181,null],[11,"bopen","","",181,null],[11,"bclose_","","",181,null],[11,"bclose_maybe_open","","",181,null],[11,"bclose","","",181,null],[11,"in_cbox","","",181,null],[11,"break_offset_if_not_bol","","",181,null],[11,"synth_comment","","",181,null],[11,"commasep_cmnt","","",181,null],[11,"commasep_exprs","","",181,null],[11,"print_mod","","",181,null],[11,"print_foreign_mod","","",181,null],[11,"print_opt_lifetime","","",181,null],[11,"print_type","","",181,null],[11,"print_foreign_item","","",181,null],[11,"print_item","","Pretty-print an item",181,null],[11,"print_enum_def","","",181,null],[11,"print_variants","","",181,null],[11,"print_visibility","","",181,null],[11,"print_struct","","",181,null],[11,"print_tt","","This doesn&#39;t deserve to be called &quot;pretty&quot; printing, but it should be\nmeaning-preserving. A quick hack that might help would be to look at the\nspans embedded in the TTs to decide where to put spaces and newlines.\nBut it&#39;d be better to parse these according to the grammar of the\nappropriate macro, transcribe back into the grammar we just parsed from,\nand then pretty-print the resulting AST nodes (so, e.g., we print\nexpression arguments as expressions). It can be done! I think.",181,null],[11,"print_tts","","",181,null],[11,"print_variant","","",181,null],[11,"print_method_sig","","",181,null],[11,"print_trait_item","","",181,null],[11,"print_impl_item","","",181,null],[11,"print_stmt","","",181,null],[11,"print_block","","",181,null],[11,"print_block_unclosed","","",181,null],[11,"print_block_unclosed_with_attrs","","",181,null],[11,"print_block_unclosed_indent","","",181,null],[11,"print_block_with_attrs","","",181,null],[11,"print_block_maybe_unclosed","","",181,null],[11,"print_if","","",181,null],[11,"print_if_let","","",181,null],[11,"print_mac","","",181,null],[11,"check_expr_bin_needs_paren","","",181,null],[11,"print_expr_maybe_paren","","",181,null],[11,"print_expr","","",181,null],[11,"print_local_decl","","",181,null],[11,"print_ident","","",181,null],[11,"print_usize","","",181,null],[11,"print_name","","",181,null],[11,"print_for_decl","","",181,null],[11,"print_pat","","",181,null],[11,"print_fn","","",181,null],[11,"print_fn_args_and_ret","","",181,null],[11,"print_fn_block_args","","",181,null],[11,"print_capture_clause","","",181,null],[11,"print_bounds","","",181,null],[11,"print_lifetime","","",181,null],[11,"print_lifetime_bounds","","",181,null],[11,"print_generics","","",181,null],[11,"print_ty_param","","",181,null],[11,"print_where_clause","","",181,null],[11,"print_view_path","","",181,null],[11,"print_mutability","","",181,null],[11,"print_mt","","",181,null],[11,"print_arg","","",181,null],[11,"print_fn_output","","",181,null],[11,"print_ty_fn","","",181,null],[11,"maybe_print_trailing_comment","","",181,null],[11,"print_remaining_comments","","",181,null],[11,"print_opt_abi_and_extern_if_nondefault","","",181,null],[11,"print_extern_opt_abi","","",181,null],[11,"print_fn_header_info","","",181,null],[11,"print_unsafety","","",181,null],[0,"ext","syntex_syntax","",null,null],[0,"base","syntex_syntax::ext","",null,null],[3,"MacEager","syntex_syntax::ext::base","`MacResult` implementation for the common case where you&#39;ve already\nbuilt each form of AST that you might return.",null,null],[12,"expr","","",186,null],[12,"pat","","",186,null],[12,"items","","",186,null],[12,"impl_items","","",186,null],[12,"trait_items","","",186,null],[12,"stmts","","",186,null],[12,"ty","","",186,null],[3,"DummyResult","","Fill-in macro expansion result, to allow compilation to continue\nafter hitting errors.",null,null],[3,"DummyResolver","","",null,null],[3,"ModuleData","","",null,null],[12,"mod_path","","",187,null],[12,"directory","","",187,null],[3,"ExpansionData","","",null,null],[12,"mark","","",188,null],[12,"depth","","",188,null],[12,"backtrace","","",188,null],[12,"module","","",188,null],[12,"no_noninline_mod","","",188,null],[3,"ExtCtxt","","One of these is made during expansion and incrementally updated as we go;\nwhen a macro expansion occurs, the resulting nodes have the backtrace()\n-&gt; expn_info of their expansion context stored into their span.",null,null],[12,"parse_sess","","",189,null],[12,"cfg","","",189,null],[12,"ecfg","","",189,null],[12,"crate_root","","",189,null],[12,"resolver","","",189,null],[12,"resolve_err_count","","",189,null],[12,"current_expansion","","",189,null],[3,"ChangeSpan","","",null,null],[12,"span","","",190,null],[4,"Annotatable","","",null,null],[13,"Item","","",191,null],[13,"TraitItem","","",191,null],[13,"ImplItem","","",191,null],[4,"SyntaxExtension","","An enum representing the different kinds of syntax extensions.",null,null],[13,"MultiDecorator","","A syntax extension that is attached to an item and creates new items\nbased upon it.",192,null],[13,"MultiModifier","","A syntax extension that is attached to an item and modifies it\nin-place. Also allows decoration, i.e., creating new items.",192,null],[13,"ProcMacro","","A function-like procedural macro. TokenStream -&gt; TokenStream.",192,null],[13,"AttrProcMacro","","An attribute-like procedural macro. TokenStream, TokenStream -&gt; TokenStream.\nThe first TokenSteam is the attribute, the second is the annotated item.\nAllows modification of the input items and adding new items, similar to\nMultiModifier, but uses TokenStreams, rather than AST nodes.",192,null],[13,"NormalTT","","A normal, function-like syntax extension.",192,null],[13,"IdentTT","","A function-like syntax extension that has an extra ident before\nthe block.",192,null],[13,"CustomDerive","","",192,null],[4,"Determinacy","","",null,null],[13,"Determined","","",193,null],[13,"Undetermined","","",193,null],[5,"expr_to_spanned_string","","Extract a string literal from the macro expanded version of `expr`,\nemitting `err_msg` if `expr` is not a string literal. This does not stop\ncompilation on error, merely emits a non-fatal error and returns None.",null,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"check_zero_tts","","Non-fatally assert that `tts` is empty. Note that this function\nreturns even when `tts` is non-empty, macros that *need* to stop\ncompilation should call\n`cx.parse_sess.span_diagnostic.abort_if_errors()` (this should be\ndone as rarely as possible).",null,null],[5,"get_single_str_from_tts","","Extract the string literal from the first token of `tts`. If this\nis not a string literal, emit an error and return None.",null,null],[5,"get_exprs_from_tts","","Extract comma-separated expressions from `tts`. If there is a\nparsing error, emit a non-fatal error and return None.",null,null],[6,"MacroExpanderFn","","",null,null],[6,"IdentMacroExpanderFn","","",null,null],[6,"NamedSyntaxExtension","","",null,null],[8,"MultiItemDecorator","","",null,null],[10,"expand","","",194,null],[8,"MultiItemModifier","","",null,null],[10,"expand","","",195,null],[8,"ProcMacro","","",null,null],[10,"expand","","",196,null],[8,"AttrProcMacro","","",null,null],[10,"expand","","",197,null],[8,"TTMacroExpander","","Represents a thing that maps token trees to Macro Results",null,null],[10,"expand","","",198,null],[8,"IdentMacroExpander","","",null,null],[10,"expand","","",199,null],[8,"MacResult","","The result of a macro expansion. The return values of the various\nmethods are spliced into the AST at the callsite of the macro.",null,null],[11,"make_expr","","Create an expression.",200,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","Create zero or more items.",200,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","Create zero or more impl items.",200,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","Create zero or more trait items.",200,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","Create a pattern.",200,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","Create zero or more statements.",200,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",200,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[8,"Resolver","","",null,null],[10,"next_node_id","","",201,null],[10,"get_module_scope","","",201,null],[10,"visit_expansion","","",201,null],[10,"add_macro","","",201,null],[10,"add_ext","","",201,null],[10,"add_expansions_at_stmt","","",201,null],[10,"find_attr_invoc","","",201,null],[10,"find_extension","","",201,null],[10,"find_mac","","",201,null],[10,"resolve_macro","","",201,null],[11,"clone","","",191,null],[11,"fmt","","",191,null],[11,"attrs","","",191,null],[11,"map_attrs","","",191,null],[11,"expect_item","","",191,null],[11,"map_item_or","","",191,null],[11,"expect_trait_item","","",191,null],[11,"expect_impl_item","","",191,null],[11,"into","","",191,null],[11,"default","","",186,{"inputs":[],"output":{"name":"maceager"}}],[11,"expr","","",186,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"pat","","",186,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"items","","",186,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"impl_items","","",186,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"trait_items","","",186,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"stmts","","",186,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"ty","","",186,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"make_expr","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"clone","","",202,null],[11,"any","","Create a default MacResult that can be anything.",202,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",202,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",202,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",202,{"inputs":[{"name":"span"}],"output":{"name":"pat"}}],[11,"raw_ty","","",202,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"make_expr","","",202,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",202,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",202,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",202,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",202,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",202,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",202,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"fmt","","",193,null],[11,"clone","","",193,null],[11,"next_node_id","","",203,null],[11,"get_module_scope","","",203,null],[11,"visit_expansion","","",203,null],[11,"add_macro","","",203,null],[11,"add_ext","","",203,null],[11,"add_expansions_at_stmt","","",203,null],[11,"find_attr_invoc","","",203,null],[11,"find_extension","","",203,null],[11,"find_mac","","",203,null],[11,"resolve_macro","","",203,null],[11,"clone","","",187,null],[11,"clone","","",188,null],[11,"new","","",189,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"expansionconfig"},{"name":"resolver"}],"output":{"name":"extctxt"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in an AST node.",189,null],[11,"monotonic_expander","","Returns a `Folder` that deeply expands all macros and assigns all node ids in an AST node.\nOnce node ids are assigned, the node may not be expanded, removed, or otherwise modified.",189,null],[11,"new_parser_from_tts","","",189,null],[11,"codemap","","",189,null],[11,"parse_sess","","",189,null],[11,"cfg","","",189,null],[11,"call_site","","",189,null],[11,"backtrace","","",189,null],[11,"expansion_cause","","Returns span for the macro which originally caused the current expansion to happen.",189,null],[11,"bt_push","","",189,null],[11,"bt_pop","","",189,null],[11,"struct_span_warn","","",189,null],[11,"struct_span_err","","",189,null],[11,"struct_span_fatal","","",189,null],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",189,null],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping\ncompilation.",189,null],[11,"span_warn","","",189,null],[11,"span_unimpl","","",189,null],[11,"span_bug","","",189,null],[11,"bug","","",189,null],[11,"trace_macros","","",189,null],[11,"set_trace_macros","","",189,null],[11,"ident_of","","",189,null],[11,"std_path","","",189,null],[11,"name_of","","",189,null],[11,"new_span","","",190,null],[11,"fold_mac","","",190,null],[0,"build","syntex_syntax::ext","",null,null],[8,"AstBuilder","syntex_syntax::ext::build","",null,null],[10,"path","","",204,null],[10,"path_ident","","",204,null],[10,"path_global","","",204,null],[10,"path_all","","",204,null],[10,"qpath","","",204,null],[10,"qpath_all","","",204,null],[10,"ty_mt","","",204,null],[10,"ty","","",204,null],[10,"ty_path","","",204,null],[10,"ty_sum","","",204,null],[10,"ty_ident","","",204,null],[10,"ty_rptr","","",204,null],[10,"ty_ptr","","",204,null],[10,"ty_option","","",204,null],[10,"ty_infer","","",204,null],[10,"ty_vars","","",204,null],[10,"ty_vars_global","","",204,null],[10,"typaram","","",204,null],[10,"trait_ref","","",204,null],[10,"poly_trait_ref","","",204,null],[10,"typarambound","","",204,null],[10,"lifetime","","",204,null],[10,"lifetime_def","","",204,null],[10,"stmt_expr","","",204,null],[10,"stmt_semi","","",204,null],[10,"stmt_let","","",204,null],[10,"stmt_let_typed","","",204,null],[10,"stmt_let_type_only","","",204,null],[10,"stmt_item","","",204,null],[10,"block","","",204,null],[10,"block_expr","","",204,null],[10,"expr","","",204,null],[10,"expr_path","","",204,null],[10,"expr_qpath","","",204,null],[10,"expr_ident","","",204,null],[10,"expr_self","","",204,null],[10,"expr_binary","","",204,null],[10,"expr_deref","","",204,null],[10,"expr_unary","","",204,null],[10,"expr_addr_of","","",204,null],[10,"expr_mut_addr_of","","",204,null],[10,"expr_field_access","","",204,null],[10,"expr_tup_field_access","","",204,null],[10,"expr_call","","",204,null],[10,"expr_call_ident","","",204,null],[10,"expr_call_global","","",204,null],[10,"expr_method_call","","",204,null],[10,"expr_block","","",204,null],[10,"expr_cast","","",204,null],[10,"field_imm","","",204,null],[10,"expr_struct","","",204,null],[10,"expr_struct_ident","","",204,null],[10,"expr_lit","","",204,null],[10,"expr_usize","","",204,null],[10,"expr_isize","","",204,null],[10,"expr_u8","","",204,null],[10,"expr_u32","","",204,null],[10,"expr_bool","","",204,null],[10,"expr_vec","","",204,null],[10,"expr_vec_ng","","",204,null],[10,"expr_vec_slice","","",204,null],[10,"expr_str","","",204,null],[10,"expr_some","","",204,null],[10,"expr_none","","",204,null],[10,"expr_break","","",204,null],[10,"expr_tuple","","",204,null],[10,"expr_fail","","",204,null],[10,"expr_unreachable","","",204,null],[10,"expr_ok","","",204,null],[10,"expr_err","","",204,null],[10,"expr_try","","",204,null],[10,"pat","","",204,null],[10,"pat_wild","","",204,null],[10,"pat_lit","","",204,null],[10,"pat_ident","","",204,null],[10,"pat_ident_binding_mode","","",204,null],[10,"pat_path","","",204,null],[10,"pat_tuple_struct","","",204,null],[10,"pat_struct","","",204,null],[10,"pat_tuple","","",204,null],[10,"pat_some","","",204,null],[10,"pat_none","","",204,null],[10,"pat_ok","","",204,null],[10,"pat_err","","",204,null],[10,"arm","","",204,null],[10,"arm_unreachable","","",204,null],[10,"expr_match","","",204,null],[10,"expr_if","","",204,null],[10,"expr_loop","","",204,null],[10,"lambda_fn_decl","","",204,null],[10,"lambda","","",204,null],[10,"lambda0","","",204,null],[10,"lambda1","","",204,null],[10,"lambda_expr","","",204,null],[10,"lambda_expr_0","","",204,null],[10,"lambda_expr_1","","",204,null],[10,"lambda_stmts","","",204,null],[10,"lambda_stmts_0","","",204,null],[10,"lambda_stmts_1","","",204,null],[10,"item","","",204,null],[10,"arg","","",204,null],[10,"fn_decl","","",204,null],[10,"item_fn_poly","","",204,null],[10,"item_fn","","",204,null],[10,"variant","","",204,null],[10,"item_enum_poly","","",204,null],[10,"item_enum","","",204,null],[10,"item_struct_poly","","",204,null],[10,"item_struct","","",204,null],[10,"item_mod","","",204,null],[10,"item_static","","",204,null],[10,"item_const","","",204,null],[10,"item_ty_poly","","",204,null],[10,"item_ty","","",204,null],[10,"attribute","","",204,null],[10,"meta_word","","",204,null],[10,"meta_list_item_word","","",204,null],[10,"meta_list","","",204,null],[10,"meta_name_value","","",204,null],[10,"item_use","","",204,null],[10,"item_use_simple","","",204,null],[10,"item_use_simple_","","",204,null],[10,"item_use_list","","",204,null],[10,"item_use_glob","","",204,null],[11,"path","syntex_syntax::ext::base","",189,null],[11,"path_ident","","",189,null],[11,"path_global","","",189,null],[11,"path_all","","",189,null],[11,"qpath","","Constructs a qualified path.",189,null],[11,"qpath_all","","Constructs a qualified path.",189,null],[11,"ty_mt","","",189,null],[11,"ty","","",189,null],[11,"ty_path","","",189,null],[11,"ty_sum","","",189,null],[11,"ty_ident","","",189,null],[11,"ty_rptr","","",189,null],[11,"ty_ptr","","",189,null],[11,"ty_option","","",189,null],[11,"ty_infer","","",189,null],[11,"typaram","","",189,null],[11,"ty_vars","","",189,null],[11,"ty_vars_global","","",189,null],[11,"trait_ref","","",189,null],[11,"poly_trait_ref","","",189,null],[11,"typarambound","","",189,null],[11,"lifetime","","",189,null],[11,"lifetime_def","","",189,null],[11,"stmt_expr","","",189,null],[11,"stmt_semi","","",189,null],[11,"stmt_let","","",189,null],[11,"stmt_let_typed","","",189,null],[11,"stmt_let_type_only","","",189,null],[11,"stmt_item","","",189,null],[11,"block_expr","","",189,null],[11,"block","","",189,null],[11,"expr","","",189,null],[11,"expr_path","","",189,null],[11,"expr_qpath","","Constructs a QPath expression.",189,null],[11,"expr_ident","","",189,null],[11,"expr_self","","",189,null],[11,"expr_binary","","",189,null],[11,"expr_deref","","",189,null],[11,"expr_unary","","",189,null],[11,"expr_field_access","","",189,null],[11,"expr_tup_field_access","","",189,null],[11,"expr_addr_of","","",189,null],[11,"expr_mut_addr_of","","",189,null],[11,"expr_call","","",189,null],[11,"expr_call_ident","","",189,null],[11,"expr_call_global","","",189,null],[11,"expr_method_call","","",189,null],[11,"expr_block","","",189,null],[11,"field_imm","","",189,null],[11,"expr_struct","","",189,null],[11,"expr_struct_ident","","",189,null],[11,"expr_lit","","",189,null],[11,"expr_usize","","",189,null],[11,"expr_isize","","",189,null],[11,"expr_u32","","",189,null],[11,"expr_u8","","",189,null],[11,"expr_bool","","",189,null],[11,"expr_vec","","",189,null],[11,"expr_vec_ng","","",189,null],[11,"expr_vec_slice","","",189,null],[11,"expr_str","","",189,null],[11,"expr_cast","","",189,null],[11,"expr_some","","",189,null],[11,"expr_none","","",189,null],[11,"expr_break","","",189,null],[11,"expr_tuple","","",189,null],[11,"expr_fail","","",189,null],[11,"expr_unreachable","","",189,null],[11,"expr_ok","","",189,null],[11,"expr_err","","",189,null],[11,"expr_try","","",189,null],[11,"pat","","",189,null],[11,"pat_wild","","",189,null],[11,"pat_lit","","",189,null],[11,"pat_ident","","",189,null],[11,"pat_ident_binding_mode","","",189,null],[11,"pat_path","","",189,null],[11,"pat_tuple_struct","","",189,null],[11,"pat_struct","","",189,null],[11,"pat_tuple","","",189,null],[11,"pat_some","","",189,null],[11,"pat_none","","",189,null],[11,"pat_ok","","",189,null],[11,"pat_err","","",189,null],[11,"arm","","",189,null],[11,"arm_unreachable","","",189,null],[11,"expr_match","","",189,null],[11,"expr_if","","",189,null],[11,"expr_loop","","",189,null],[11,"lambda_fn_decl","","",189,null],[11,"lambda","","",189,null],[11,"lambda0","","",189,null],[11,"lambda1","","",189,null],[11,"lambda_expr","","",189,null],[11,"lambda_expr_0","","",189,null],[11,"lambda_expr_1","","",189,null],[11,"lambda_stmts","","",189,null],[11,"lambda_stmts_0","","",189,null],[11,"lambda_stmts_1","","",189,null],[11,"arg","","",189,null],[11,"fn_decl","","",189,null],[11,"item","","",189,null],[11,"item_fn_poly","","",189,null],[11,"item_fn","","",189,null],[11,"variant","","",189,null],[11,"item_enum_poly","","",189,null],[11,"item_enum","","",189,null],[11,"item_struct","","",189,null],[11,"item_struct_poly","","",189,null],[11,"item_mod","","",189,null],[11,"item_static","","",189,null],[11,"item_const","","",189,null],[11,"item_ty_poly","","",189,null],[11,"item_ty","","",189,null],[11,"attribute","","",189,null],[11,"meta_word","","",189,null],[11,"meta_list_item_word","","",189,null],[11,"meta_list","","",189,null],[11,"meta_name_value","","",189,null],[11,"item_use","","",189,null],[11,"item_use_simple","","",189,null],[11,"item_use_simple_","","",189,null],[11,"item_use_list","","",189,null],[11,"item_use_glob","","",189,null],[0,"decorator","syntex_syntax::ext","",null,null],[5,"expand_attributes","syntex_syntax::ext::decorator","",null,{"inputs":[{"name":"extctxt"},{"name":"crate"}],"output":{"name":"crate"}}],[0,"env","syntex_syntax::ext","",null,null],[5,"expand_option_env","syntex_syntax::ext::env","",null,null],[5,"expand_env","","",null,null],[0,"expand","syntex_syntax::ext","",null,null],[3,"Invocation","syntex_syntax::ext::expand","",null,null],[12,"kind","","",205,null],[3,"MacroExpander","","",null,null],[12,"cx","","",206,null],[3,"ExpansionConfig","","",null,null],[12,"crate_name","","",207,null],[12,"features","","",207,null],[12,"recursion_limit","","",207,null],[12,"trace_mac","","",207,null],[12,"should_test","","",207,null],[12,"single_step","","",207,null],[12,"keep_macs","","",207,null],[4,"ExpansionKind","","",null,null],[13,"OptExpr","","",208,null],[13,"Expr","","",208,null],[13,"Pat","","",208,null],[13,"Ty","","",208,null],[13,"Stmts","","",208,null],[13,"Items","","",208,null],[13,"TraitItems","","",208,null],[13,"ImplItems","","",208,null],[4,"Expansion","","",null,null],[13,"OptExpr","","",209,null],[13,"Expr","","",209,null],[13,"Pat","","",209,null],[13,"Ty","","",209,null],[13,"Stmts","","",209,null],[13,"Items","","",209,null],[13,"TraitItems","","",209,null],[13,"ImplItems","","",209,null],[4,"InvocationKind","","",null,null],[13,"Bang","","",210,null],[12,"attrs","syntex_syntax::ext::expand::InvocationKind","",210,null],[12,"mac","","",210,null],[12,"ident","","",210,null],[12,"span","","",210,null],[13,"Attr","syntex_syntax::ext::expand","",210,null],[12,"attr","syntex_syntax::ext::expand::InvocationKind","",210,null],[12,"item","","",210,null],[5,"mark_tts","syntex_syntax::ext::expand","",null,null],[11,"eq","","",208,null],[11,"clone","","",208,null],[11,"name","","",208,null],[11,"make_opt_expr","","",209,null],[11,"make_expr","","",209,null],[11,"make_pat","","",209,null],[11,"make_ty","","",209,null],[11,"make_stmts","","",209,null],[11,"make_items","","",209,null],[11,"make_trait_items","","",209,null],[11,"make_impl_items","","",209,null],[11,"fold_with","","",209,null],[11,"visit_with","","",209,null],[11,"fold_opt_expr","","",206,null],[11,"fold_expr","","",206,null],[11,"fold_pat","","",206,null],[11,"fold_ty","","",206,null],[11,"fold_stmt","","",206,null],[11,"fold_item","","",206,null],[11,"fold_trait_item","","",206,null],[11,"fold_impl_item","","",206,null],[11,"new","","",206,{"inputs":[{"name":"extctxt"},{"name":"bool"}],"output":{"name":"self"}}],[11,"expand_crate","","",206,null],[11,"parse_expansion","syntex_syntax::parse::parser","",136,null],[11,"ensure_complete_parse","","",136,null],[11,"default","syntex_syntax::ext::expand","",207,{"inputs":[{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",207,null],[11,"enable_asm","","",207,null],[11,"enable_log_syntax","","",207,null],[11,"enable_concat_idents","","",207,null],[11,"enable_trace_macros","","",207,null],[11,"enable_allow_internal_unstable","","",207,null],[11,"enable_custom_derive","","",207,null],[11,"enable_pushpop_unsafe","","",207,null],[11,"enable_proc_macro","","",207,null],[0,"placeholders","syntex_syntax::ext","",null,null],[3,"PlaceholderExpander","syntex_syntax::ext::placeholders","",null,null],[5,"placeholder","","",null,{"inputs":[{"name":"expansionkind"},{"name":"nodeid"}],"output":{"name":"expansion"}}],[5,"macro_scope_placeholder","","",null,{"inputs":[],"output":{"name":"expansion"}}],[5,"reconstructed_macro_rules","","",null,{"inputs":[{"name":"macrodef"}],"output":{"name":"expansion"}}],[11,"new","","",211,{"inputs":[{"name":"extctxt"},{"name":"bool"}],"output":{"name":"self"}}],[11,"add","","",211,null],[11,"fold_item","","",211,null],[11,"fold_trait_item","","",211,null],[11,"fold_impl_item","","",211,null],[11,"fold_expr","","",211,null],[11,"fold_opt_expr","","",211,null],[11,"fold_stmt","","",211,null],[11,"fold_pat","","",211,null],[11,"fold_ty","","",211,null],[11,"fold_block","","",211,null],[11,"fold_mod","","",211,null],[11,"fold_mac","","",211,null],[0,"hygiene","syntex_syntax::ext","Machinery for hygienic macros, inspired by the MTWT[1] paper.",null,null],[3,"SyntaxContext","syntex_syntax::ext::hygiene","A SyntaxContext represents a chain of macro expansions (represented by marks).",null,null],[12,"0","","",212,null],[3,"SyntaxContextData","","",null,null],[12,"outer_mark","","",213,null],[12,"prev_ctxt","","",213,null],[3,"Mark","","A mark is a unique id associated with a macro expansion.",null,null],[5,"reset_hygiene_data","","",null,{"inputs":[],"output":null}],[11,"default","","",212,{"inputs":[],"output":{"name":"syntaxcontext"}}],[11,"decode","","",212,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",212,null],[11,"hash","","",212,null],[11,"eq","","",212,null],[11,"ne","","",212,null],[11,"clone","","",212,null],[11,"clone","","",213,null],[11,"default","","",214,{"inputs":[],"output":{"name":"mark"}}],[11,"fmt","","",214,null],[11,"hash","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"clone","","",214,null],[11,"fresh","","",214,{"inputs":[],"output":{"name":"self"}}],[11,"root","","The mark of the theoretical expansion that generates freshly parsed, unexpanded AST.",214,{"inputs":[],"output":{"name":"self"}}],[11,"from_placeholder_id","","",214,{"inputs":[{"name":"nodeid"}],"output":{"name":"self"}}],[11,"as_u32","","",214,null],[11,"empty","","",212,{"inputs":[],"output":{"name":"self"}}],[11,"data","","",212,null],[11,"apply_mark","","Extend a syntax context with a given mark",212,null],[11,"source","","If `ident` is macro expanded, return the source ident from the macro definition\nand the mark of the expansion that created the macro definition.",212,null],[11,"fmt","","",212,null],[0,"proc_macro_shim","syntex_syntax::ext","This is a shim file to ease the transition to the final procedural macro interface for\nMacros 2.0. It currently exposes the `libsyntax` operations that the quasiquoter&#39;s\noutput needs to compile correctly, along with the following operators:",null,null],[5,"build_block_emitter","syntex_syntax::ext::proc_macro_shim","Take a `ExtCtxt`, `Span`, and `TokenStream`, and produce a Macro Result that parses\nthe TokenStream as a block and returns it as an `Expr`.",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"}],"output":{"name":"box"}}],[0,"prelude","","",null,null],[17,"DUMMY_SP","syntex_syntax::ext::proc_macro_shim::prelude","",null,null],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans\nare *absolute* positions from the beginning of the codemap, not positions\nrelative to FileMaps. Methods on the CodeMap can be used to relate spans back\nto the original source.\nYou must be careful if the span crosses more than one file - you will not be\nable to use many of the functions on spans in codemap and you cannot assume\nthat the length of the span = hi - lo; there may be space in the BytePos\nrange between files.",null,null],[12,"lo","","",215,null],[12,"hi","","",215,null],[12,"expn_id","","Information about where the macro came from, if this piece of\ncode was created by a macro expansion.",215,null],[0,"quote","syntex_syntax::ext","",null,null],[5,"parse_expr_panic","syntex_syntax::ext::quote","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_pat_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_arm_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[5,"parse_ty_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_stmt_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_attribute_panic","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"attribute"}}],[5,"parse_arg_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arg"}}],[5,"parse_block_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_meta_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_path_panic","","",null,{"inputs":[{"name":"parser"},{"name":"pathstyle"}],"output":{"name":"path"}}],[5,"expand_quote_tokens","","",null,null],[5,"expand_quote_expr","","",null,null],[5,"expand_quote_item","","",null,null],[5,"expand_quote_pat","","",null,null],[5,"expand_quote_arm","","",null,null],[5,"expand_quote_ty","","",null,null],[5,"expand_quote_stmt","","",null,null],[5,"expand_quote_attr","","",null,null],[5,"expand_quote_arg","","",null,null],[5,"expand_quote_block","","",null,null],[5,"expand_quote_meta_item","","",null,null],[5,"expand_quote_path","","",null,null],[5,"expand_quote_matcher","","",null,null],[0,"rt","","Quasiquoting works via token trees.",null,null],[3,"BytePos","syntex_syntax::ext::quote::rt","A byte offset. Keep this small (currently 32-bits), as AST contains\na lot of them.",null,null],[12,"0","","",216,null],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans\nare *absolute* positions from the beginning of the codemap, not positions\nrelative to FileMaps. Methods on the CodeMap can be used to relate spans back\nto the original source.\nYou must be careful if the span crosses more than one file - you will not be\nable to use many of the functions on spans in codemap and you cannot assume\nthat the length of the span = hi - lo; there may be space in the BytePos\nrange between files.",null,null],[12,"lo","","",215,null],[12,"hi","","",215,null],[12,"expn_id","","Information about where the macro came from, if this piece of\ncode was created by a macro expansion.",215,null],[17,"DUMMY_SP","","",null,null],[8,"ToTokens","","",null,null],[10,"to_tokens","","",217,null],[8,"ExtParseUtils","","",null,null],[10,"parse_item","","",218,null],[10,"parse_expr","","",218,null],[10,"parse_stmt","","",218,null],[10,"parse_tts","","",218,null],[11,"to_tokens","syntex_syntax::tokenstream","",166,null],[11,"to_tokens","syntex_syntax::codemap","",119,null],[11,"to_tokens","syntex_syntax::ast","",18,null],[11,"to_tokens","","",21,null],[11,"to_tokens","","",47,null],[11,"to_tokens","","",32,null],[11,"to_tokens","","",26,null],[11,"to_tokens","","",27,null],[11,"to_tokens","syntex_syntax::ptr","",162,null],[11,"to_tokens","syntex_syntax::ast","",45,null],[11,"to_tokens","syntex_syntax::ptr","",162,null],[11,"to_tokens","syntex_syntax::ast","",44,null],[11,"to_tokens","","",35,null],[11,"to_tokens","syntex_syntax::ptr","",162,null],[11,"to_tokens","","",162,null],[11,"to_tokens","syntex_syntax::ast","",37,null],[11,"to_tokens","","",51,null],[11,"to_tokens","syntex_syntax::ptr","",162,null],[11,"to_tokens","","",162,null],[11,"to_tokens","syntex_syntax::ext::quote::rt","",116,null],[11,"to_tokens","","",219,null],[11,"parse_item","syntex_syntax::ext::base","",189,null],[11,"parse_stmt","","",189,null],[11,"parse_expr","","",189,null],[11,"parse_tts","","",189,null],[0,"source_util","syntex_syntax::ext","",null,null],[5,"expand_line","syntex_syntax::ext::source_util","line!(): expands to the current line number",null,null],[5,"expand_column","","",null,null],[5,"expand_file","","file!(): expands to the current filename */\nThe filemap (`loc.file`) contains a bunch more information we could spit\nout if we wanted.",null,null],[5,"expand_stringify","","",null,null],[5,"expand_mod","","",null,null],[5,"expand_include","","include! : parse the given file as an expr\nThis is generally a bad idea because it&#39;s going to behave\nunhygienically.",null,null],[5,"expand_include_str","","",null,null],[5,"expand_include_bytes","","",null,null],[0,"tt","syntex_syntax::ext","",null,null],[0,"transcribe","syntex_syntax::ext::tt","",null,null],[3,"TtReader","syntex_syntax::ext::tt::transcribe","",null,null],[12,"sp_diag","","",220,null],[12,"cur_tok","","",220,null],[12,"cur_span","","",220,null],[12,"next_tok","","",220,null],[12,"desugar_doc_comments","","Transform doc comments. Only useful in macro invocations",220,null],[12,"fatal_errs","","",220,null],[5,"new_tt_reader","","This can do Macro-By-Example transcription. On the other hand, if\n`src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n(and should) be None.",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"vec"}],"output":{"name":"ttreader"}}],[5,"new_tt_reader_with_doc_flag","","The extra `desugar_doc_comments` flag enables reading doc comments\nlike any other attribute which consists of `meta` and surrounding #[ ] tokens.",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"ttreader"}}],[5,"tt_next_token","","Return the next token from the TtReader.\nEFFECT: advances the reader&#39;s token field",null,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"clone","","",220,null],[0,"macro_parser","syntex_syntax::ext::tt","This is an Earley-like parser, without support for in-grammar nonterminals,\nonly by calling out to the main rust parser for named nonterminals (which it\ncommits to fully when it hits one in a grammar). This means that there are no\ncompleter or predictor rules, and therefore no need to store one column per\ntoken: instead, there&#39;s a set of current Earley items and a set of next\nones. Instead of NTs, we have a special case for Kleene star. The big-O, in\npathological cases, is worse than traditional Earley parsing, but it&#39;s an\neasier fit for Macro-by-Example-style rules, and I think the overhead is\nlower. (In order to prevent the pathological case, we&#39;d need to lazily\nconstruct the resulting `NamedMatch`es at the very end. It&#39;d be a pain,\nand require more memory to keep around old items, but it would also save\noverhead)",null,null],[3,"MatcherPos","syntex_syntax::ext::tt::macro_parser","",null,null],[4,"NamedMatch","","NamedMatch is a pattern-match result for a single token::MATCH_NONTERMINAL:\nso it is associated with a single ident in a parse, and all\n`MatchedNonterminal`s in the NamedMatch have the same nonterminal type\n(expr, item, etc). Each leaf in a single NamedMatch corresponds to a\nsingle token::MATCH_NONTERMINAL in the TokenTree that produced it.",null,null],[13,"MatchedSeq","","",221,null],[13,"MatchedNonterminal","","",221,null],[4,"ParseResult","","",null,null],[13,"Success","","",222,null],[13,"Failure","","Arm failed to match",222,null],[13,"Error","","Fatal error (malformed macro?). Abort compilation.",222,null],[5,"count_names","","",null,null],[5,"initial_matcher_pos","","",null,{"inputs":[{"name":"rc"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"box"}}],[5,"nameize","","",null,null],[5,"token_name_eq","","Perform a token equality check, ignoring syntax context (that is, an\nunhygienic comparison)",null,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[5,"parse","","",null,null],[5,"parse_nt","","",null,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":{"name":"nonterminal"}}],[6,"NamedParseResult","","",null,null],[6,"PositionalParseResult","","",null,null],[11,"clone","","",223,null],[0,"macro_rules","syntex_syntax::ext::tt","",null,null],[3,"ParserAnyMacro","syntex_syntax::ext::tt::macro_rules","",null,null],[3,"MacroRulesExpander","","",null,null],[5,"compile","","Converts a `macro_rules!` invocation into a syntax extension.",null,{"inputs":[{"name":"parsesess"},{"name":"macrodef"}],"output":{"name":"syntaxextension"}}],[11,"make","","",224,{"inputs":[{"name":"box"},{"name":"expansionkind"}],"output":{"name":"expansion"}}],[11,"expand","","",225,null],[14,"panictry!","syntex_syntax","",null,null],[14,"register_diagnostic!","","",null,null],[14,"span_fatal!","","",null,null],[14,"span_err!","","",null,null],[14,"span_warn!","","",null,null],[14,"span_err_or_warn!","","",null,null],[14,"struct_span_fatal!","","",null,null],[14,"struct_span_err!","","",null,null],[14,"struct_span_warn!","","",null,null],[14,"struct_span_err_or_warn!","","",null,null],[14,"span_note!","","",null,null],[14,"span_help!","","",null,null],[14,"help!","","",null,null],[14,"register_diagnostics!","","",null,null],[14,"register_long_diagnostics!","","",null,null],[14,"walk_list!","","",null,null],[11,"move_flat_map","syntex_syntax::ptr","",162,null],[11,"attrs","","",162,null],[11,"map_attrs","","",162,null],[11,"is_eof","syntex_syntax::ext::tt::transcribe","",220,null],[11,"try_next_token","","",220,null],[11,"fatal","","",220,null],[11,"err","","",220,null],[11,"emit_fatal_errors","","",220,null],[11,"peek","","",220,null],[11,"make_expr","syntex_syntax::ext::tt::macro_rules","",224,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",224,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",224,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",224,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",224,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",224,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",224,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"end_point","syntex_syntax::ext::quote::rt","Returns a new span representing just the end-point of this span",215,null],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",215,null],[11,"contains","","",215,null],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",215,null],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",215,null],[11,"eq","","",215,null],[11,"ne","","",215,null],[11,"hash","","",215,null],[11,"clone","","",215,null],[11,"encode","","",215,null],[11,"decode","","",215,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",215,null],[11,"fmt","","",216,null],[11,"cmp","","",216,null],[11,"partial_cmp","","",216,null],[11,"lt","","",216,null],[11,"le","","",216,null],[11,"gt","","",216,null],[11,"ge","","",216,null],[11,"hash","","",216,null],[11,"eq","","",216,null],[11,"ne","","",216,null],[11,"clone","","",216,null],[11,"from_usize","","",216,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",216,null],[11,"add","","",216,null],[11,"sub","","",216,null],[11,"encode","","",216,null],[11,"decode","","",216,{"inputs":[{"name":"d"}],"output":{"name":"result"}}]],"paths":[[3,"ErrorInfo"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[3,"Interner"],[3,"NodeCounter"],[4,"AssocOp"],[4,"Fixity"],[3,"SmallVector"],[3,"IntoIter"],[8,"MoveMap"],[3,"ThinVec"],[3,"JsonEmitter"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[4,"AbiArchitecture"],[3,"AbiData"],[3,"Name"],[3,"Ident"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Stmt"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"Expr"],[3,"QSelf"],[3,"Mac_"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[3,"ImplItem"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[3,"PathListItem_"],[3,"AttrId"],[3,"Attribute_"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField"],[3,"Item"],[3,"ForeignItem"],[3,"MacroDef"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"WherePredicate"],[4,"NestedMetaItemKind"],[4,"MetaItemKind"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOpKind"],[4,"UnOp"],[4,"StmtKind"],[4,"MacStmtStyle"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"RangeLimits"],[4,"ExprKind"],[4,"CaptureBy"],[4,"StrStyle"],[4,"LitIntType"],[4,"LitKind"],[4,"TraitItemKind"],[4,"ImplItemKind"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[4,"TyKind"],[4,"AsmDialect"],[4,"SelfKind"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ViewPath_"],[4,"AttrStyle"],[4,"Visibility"],[4,"VariantData"],[4,"ItemKind"],[4,"ForeignItemKind"],[3,"NodeId"],[3,"Stability"],[3,"RustcDeprecation"],[3,"Deprecation"],[4,"InlineAttr"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[8,"HasAttrs"],[6,"NestedMetaItem"],[6,"Attribute"],[6,"MetaItem"],[6,"Variant"],[3,"Spanned"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"CodeMap"],[4,"ExpnFormat"],[8,"FileLoader"],[3,"RealFileLoader"],[3,"StripUnconfigured"],[4,"EntryPointType"],[3,"Features"],[4,"AttributeType"],[4,"AttributeGate"],[4,"GateIssue"],[4,"UnstableFeatures"],[3,"GatedCfg"],[8,"Folder"],[3,"ParseSess"],[3,"Parser"],[3,"ModulePath"],[3,"ModulePathSuccess"],[3,"ModulePathError"],[4,"PathStyle"],[4,"BoundParsingMode"],[4,"SemiColonMode"],[4,"TokenType"],[4,"LhsExpr"],[3,"Restrictions"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"Comment"],[3,"Literal"],[4,"CommentStyle"],[8,"Reader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[3,"Keyword"],[3,"InternedString"],[3,"SeqSep"],[8,"ParserObsoleteMethods"],[4,"ObsoleteSyntax"],[3,"P"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[4,"TokenTree"],[4,"InternalTS"],[3,"TokenStream"],[3,"Iter"],[3,"Split"],[4,"FnKind"],[8,"Visitor"],[3,"Printer"],[4,"Breaks"],[4,"Token"],[4,"PrintStackBreak"],[3,"BreakToken"],[3,"BeginToken"],[3,"PrintStackElem"],[3,"CurrentCommentAndLiteral"],[3,"State"],[4,"AnnNode"],[8,"PpAnn"],[8,"PrintState"],[3,"NoAnn"],[3,"MacEager"],[3,"ModuleData"],[3,"ExpansionData"],[3,"ExtCtxt"],[3,"ChangeSpan"],[4,"Annotatable"],[4,"SyntaxExtension"],[4,"Determinacy"],[8,"MultiItemDecorator"],[8,"MultiItemModifier"],[8,"ProcMacro"],[8,"AttrProcMacro"],[8,"TTMacroExpander"],[8,"IdentMacroExpander"],[8,"MacResult"],[8,"Resolver"],[3,"DummyResult"],[3,"DummyResolver"],[8,"AstBuilder"],[3,"Invocation"],[3,"MacroExpander"],[3,"ExpansionConfig"],[4,"ExpansionKind"],[4,"Expansion"],[4,"InvocationKind"],[3,"PlaceholderExpander"],[3,"SyntaxContext"],[3,"SyntaxContextData"],[3,"Mark"],[3,"Span"],[3,"BytePos"],[8,"ToTokens"],[8,"ExtParseUtils"],[6,"Lit"],[3,"TtReader"],[4,"NamedMatch"],[4,"ParseResult"],[3,"MatcherPos"],[3,"ParserAnyMacro"],[3,"MacroRulesExpander"]]};
searchIndex["syntex_errors"] = {"doc":"","items":[[3,"CodeSuggestion","syntex_errors","",null,null],[12,"msp","","",0,null],[12,"substitutes","","",0,null],[3,"FatalError","","Used as a return value to signify a fatal error occurred. (It is also\nused as the argument to panic at the moment, but that will eventually\nnot be true.)",null,null],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug`\nor `.span_bug` rather than a failed assertion, etc.",null,null],[3,"DiagnosticBuilder","","Used for emitting structured error messages and other diagnostic information.",null,null],[12,"level","","",1,null],[12,"message","","",1,null],[12,"code","","",1,null],[12,"span","","",1,null],[12,"children","","",1,null],[3,"SubDiagnostic","","For example a note attached to an error.",null,null],[12,"level","","",2,null],[12,"message","","",2,null],[12,"span","","",2,null],[12,"render_span","","",2,null],[3,"Handler","","A handler deals with errors; certain errors\n(fatal, bug, unimpl) may cause immediate exit,\nothers log errors for later reporting.",null,null],[12,"can_emit_warnings","","",3,null],[4,"RenderSpan","","",null,null],[13,"FullSpan","","A FullSpan renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary of\nthe source code covered by the span.",4,null],[13,"Suggestion","","A suggestion renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary\nof hypothetical source code, where each `String` is spliced\ninto the lines in place of the code covered by each span.",4,null],[4,"Level","","",null,null],[13,"Bug","","",5,null],[13,"Fatal","","",5,null],[13,"PhaseFatal","","",5,null],[13,"Error","","",5,null],[13,"Warning","","",5,null],[13,"Note","","",5,null],[13,"Help","","",5,null],[13,"Cancelled","","",5,null],[5,"expect","","",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"m"}],"output":{"name":"t"}}],[0,"emitter","","",null,null],[3,"EmitterWriter","syntex_errors::emitter","",null,null],[3,"BufferedWriter","","Buffered writer gives us a way on Unix to buffer up an entire error message before we output\nit.  This helps to prevent interleaving of multiple error messages when multiple compiler\nprocesses error simultaneously",null,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",6,null],[13,"Always","","",6,null],[13,"Never","","",6,null],[4,"Destination","","",null,null],[13,"Terminal","","",7,null],[13,"BufferedTerminal","","",7,null],[13,"Raw","","",7,null],[6,"BufferedStderr","","",null,null],[17,"MAX_HIGHLIGHT_LINES","","maximum number of lines we will print for each error; arbitrary.",null,null],[8,"Emitter","","Emitter trait for emitting errors.",null,null],[10,"emit","","Emit a structured diagnostic.",8,null],[11,"emit","","",9,null],[11,"eq","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"stderr","","",9,{"inputs":[{"name":"colorconfig"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"new","","",9,{"inputs":[{"name":"box"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"write","","",10,null],[11,"flush","","",10,null],[11,"write","","",7,null],[11,"flush","","",7,null],[0,"snippet","syntex_errors","",null,null],[3,"SnippetData","syntex_errors::snippet","",null,null],[3,"FileInfo","","",null,null],[3,"Line","","",null,null],[12,"line_index","","",11,null],[12,"annotations","","",11,null],[3,"Annotation","","",null,null],[12,"start_col","","Start column, 0-based indexing -- counting *characters*, not\nutf-8 bytes. Note that it is important that this field goes\nfirst, so that when we sort, we sort orderings by start\ncolumn.",12,null],[12,"end_col","","End column within the line (exclusive)",12,null],[12,"is_primary","","Is this annotation derived from primary span",12,null],[12,"is_minimized","","Is this a large span minimized down to a smaller span",12,null],[12,"label","","Optional label to display adjacent to the annotation.",12,null],[3,"StyledString","","",null,null],[12,"text","","",13,null],[12,"style","","",13,null],[4,"Style","","",null,null],[13,"HeaderMsg","","",14,null],[13,"FileNameStyle","","",14,null],[13,"LineAndColumn","","",14,null],[13,"LineNumber","","",14,null],[13,"Quotation","","",14,null],[13,"UnderlinePrimary","","",14,null],[13,"UnderlineSecondary","","",14,null],[13,"LabelPrimary","","",14,null],[13,"LabelSecondary","","",14,null],[13,"OldSchoolNoteText","","",14,null],[13,"OldSchoolNote","","",14,null],[13,"NoStyle","","",14,null],[13,"ErrorCode","","",14,null],[13,"Level","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"cmp","","",11,null],[11,"partial_cmp","","",11,null],[11,"lt","","",11,null],[11,"le","","",11,null],[11,"gt","","",11,null],[11,"ge","","",11,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"cmp","","",12,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",13,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"clone","","",14,null],[0,"registry","syntex_errors","",null,null],[3,"Registry","syntex_errors::registry","",null,null],[11,"clone","","",17,null],[11,"new","","",17,null],[11,"find_description","","",17,null],[0,"styled_buffer","syntex_errors","",null,null],[3,"StyledBuffer","syntex_errors::styled_buffer","",null,null],[11,"fmt","","",18,null],[11,"new","","",18,{"inputs":[],"output":{"name":"styledbuffer"}}],[11,"copy_tabs","","",18,null],[11,"render","","",18,null],[11,"putc","","",18,null],[11,"puts","","",18,null],[11,"set_style","","",18,null],[11,"prepend","","",18,null],[11,"append","","",18,null],[11,"num_lines","","",18,null],[8,"CodeMapper","syntex_errors","",null,null],[10,"lookup_char_pos","","",19,null],[10,"span_to_lines","","",19,null],[10,"span_to_string","","",19,null],[10,"span_to_filename","","",19,null],[10,"macro_backtrace","","",19,null],[10,"merge_spans","","",19,null],[11,"clone","","",4,null],[11,"clone","","",0,null],[11,"splice_lines","","Returns the assembled code suggestion.",0,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"description","","",20,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"description","","",21,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"emit","","Emit the diagnostic.",1,null],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or\ncancelled or it will panic when dropped).\nBEWARE: if this DiagnosticBuilder is an error, then creating it will\nbump the error count on the Handler and cancelling it won&#39;t undo that.\nIf you want to decrement the error count you should use `Handler::cancel`.",1,null],[11,"cancelled","","",1,null],[11,"is_fatal","","",1,null],[11,"span_label","","Add a span/label to be included in the resulting snippet.\nThis is pushed onto the `MultiSpan` that was created when the\ndiagnostic was first built. If you don&#39;t call this function at\nall, and you just supplied a `Span` to create the diagnostic,\nthen the snippet will just include that `Span`, which is\ncalled the primary span.",1,null],[11,"note_expected_found","","",1,null],[11,"note_expected_found_extra","","",1,null],[11,"note","","",1,null],[11,"span_note","","",1,null],[11,"warn","","",1,null],[11,"span_warn","","",1,null],[11,"help","","",1,null],[11,"span_help","","",1,null],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",1,null],[11,"set_span","","",1,null],[11,"code","","",1,null],[11,"message","","",1,null],[11,"level","","",1,null],[11,"fmt","","",1,null],[11,"drop","","",1,null],[11,"with_tty_emitter","","",3,{"inputs":[{"name":"colorconfig"},{"name":"bool"},{"name":"bool"},{"name":"option"}],"output":{"name":"handler"}}],[11,"with_emitter","","",3,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"box"}],"output":{"name":"handler"}}],[11,"set_continue_after_error","","",3,null],[11,"struct_dummy","","",3,null],[11,"struct_span_warn","","",3,null],[11,"struct_span_warn_with_code","","",3,null],[11,"struct_warn","","",3,null],[11,"struct_span_err","","",3,null],[11,"struct_span_err_with_code","","",3,null],[11,"struct_err","","",3,null],[11,"struct_span_fatal","","",3,null],[11,"struct_span_fatal_with_code","","",3,null],[11,"struct_fatal","","",3,null],[11,"cancel","","",3,null],[11,"span_fatal","","",3,null],[11,"span_fatal_with_code","","",3,null],[11,"span_err","","",3,null],[11,"mut_span_err","","",3,null],[11,"span_err_with_code","","",3,null],[11,"span_warn","","",3,null],[11,"span_warn_with_code","","",3,null],[11,"span_bug","","",3,null],[11,"delay_span_bug","","",3,null],[11,"span_bug_no_panic","","",3,null],[11,"span_note_without_error","","",3,null],[11,"span_unimpl","","",3,null],[11,"fatal","","",3,null],[11,"err","","",3,null],[11,"warn","","",3,null],[11,"note_without_error","","",3,null],[11,"bug","","",3,null],[11,"unimpl","","",3,null],[11,"bump_err_count","","",3,null],[11,"err_count","","",3,null],[11,"has_errors","","",3,null],[11,"abort_if_errors","","",3,null],[11,"emit","","",3,null],[11,"emit_with_code","","",3,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"fmt","","",5,null],[11,"color","","",5,null],[11,"to_str","","",5,null]],"paths":[[3,"CodeSuggestion"],[3,"DiagnosticBuilder"],[3,"SubDiagnostic"],[3,"Handler"],[4,"RenderSpan"],[4,"Level"],[4,"ColorConfig"],[4,"Destination"],[8,"Emitter"],[3,"EmitterWriter"],[3,"BufferedWriter"],[3,"Line"],[3,"Annotation"],[3,"StyledString"],[4,"Style"],[3,"SnippetData"],[3,"FileInfo"],[3,"Registry"],[3,"StyledBuffer"],[8,"CodeMapper"],[3,"FatalError"],[3,"ExplicitBug"]]};
searchIndex["syntex_pos"] = {"doc":"The source positions and related helper functions","items":[[3,"Span","syntex_pos","Spans represent a region of code, used for error reporting. Positions in spans\nare *absolute* positions from the beginning of the codemap, not positions\nrelative to FileMaps. Methods on the CodeMap can be used to relate spans back\nto the original source.\nYou must be careful if the span crosses more than one file - you will not be\nable to use many of the functions on spans in codemap and you cannot assume\nthat the length of the span = hi - lo; there may be space in the BytePos\nrange between files.",null,null],[12,"lo","","",0,null],[12,"hi","","",0,null],[12,"expn_id","","Information about where the macro came from, if this piece of\ncode was created by a macro expansion.",0,null],[3,"MultiSpan","","A collection of spans. Spans have two orthogonal attributes:",null,null],[3,"SpanLabel","","",null,null],[12,"span","","The span we are going to include in the final snippet.",1,null],[12,"is_primary","","Is this a primary span? This is the &quot;locus&quot; of the message,\nand is indicated with a `^^^^` underline, versus `----`.",1,null],[12,"label","","What label should we attach to this span (if any)?",1,null],[3,"ExpnId","","",null,null],[12,"0","","",2,null],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap",null,null],[12,"pos","","The absolute offset of the character in the CodeMap",3,null],[12,"bytes","","The number of bytes, &gt;=2",3,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn&#39;t\noriginate from files has names between angle brackets by convention,\ne.g. `&lt;anon&gt;`",4,null],[12,"abs_path","","The absolute path of the file that the source came from.",4,null],[12,"src","","The complete source code",4,null],[12,"start_pos","","The start position of this source in the CodeMap",4,null],[12,"end_pos","","The end position of this source in the CodeMap",4,null],[12,"lines","","Locations of lines beginnings in the source code",4,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",4,null],[3,"BytePos","","A byte offset. Keep this small (currently 32-bits), as AST contains\na lot of them.",null,null],[12,"0","","",5,null],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset\nis not equivalent to a character offset. The CodeMap will convert BytePos\nvalues to CharPos values as necessary.",null,null],[12,"0","","",6,null],[3,"Loc","","A source code location used for error reporting",null,null],[12,"file","","Information about the original source",7,null],[12,"line","","The (1-based) line number",7,null],[12,"col","","The (0-based) column offset",7,null],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj",null,null],[12,"filename","","",8,null],[12,"line","","",8,null],[12,"col","","",8,null],[12,"file","","",8,null],[3,"FileMapAndLine","","",null,null],[12,"fm","","",9,null],[12,"line","","",9,null],[3,"FileMapAndBytePos","","",null,null],[12,"fm","","",10,null],[12,"pos","","",10,null],[3,"LineInfo","","",null,null],[12,"line_index","","Index of line, starting from 0.",11,null],[12,"start_col","","Column in line where span begins, starting from 0.",11,null],[12,"end_col","","Column in line where span ends, starting from 0, exclusive.",11,null],[3,"FileLines","","",null,null],[12,"file","","",12,null],[12,"lines","","",12,null],[3,"MacroBacktrace","","",null,null],[12,"call_site","","span where macro was applied to generate this code",13,null],[12,"macro_decl_name","","name of macro that was applied (e.g., &quot;foo!&quot; or &quot;#[derive(Eq)]&quot;)",13,null],[12,"def_site_span","","span where macro was defined (if known)",13,null],[3,"DistinctSources","","",null,null],[12,"begin","","",14,null],[12,"end","","",14,null],[3,"MalformedCodemapPositions","","",null,null],[12,"name","","",15,null],[12,"source_len","","",15,null],[12,"begin_pos","","",15,null],[12,"end_pos","","",15,null],[4,"SpanLinesError","","",null,null],[13,"IllFormedSpan","","",16,null],[13,"DistinctSources","","",16,null],[4,"SpanSnippetError","","",null,null],[13,"IllFormedSpan","","",17,null],[13,"DistinctSources","","",17,null],[13,"MalformedForCodemap","","",17,null],[13,"SourceNotAvailable","","",17,null],[12,"filename","syntex_pos::SpanSnippetError","",17,null],[5,"mk_sp","syntex_pos","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"span"}}],[6,"FileName","","",null,null],[6,"FileLinesResult","","",null,null],[7,"SPAN_DEBUG","","",null,null],[17,"DUMMY_SP","","",null,null],[17,"COMMAND_LINE_SP","","",null,null],[17,"NO_EXPANSION","","",null,null],[17,"COMMAND_LINE_EXPN","","",null,null],[17,"PROC_EXPN","","",null,null],[8,"Pos","","",null,null],[10,"from_usize","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"to_usize","","",18,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"clone","","",0,null],[11,"clone","","",19,null],[11,"end_point","","Returns a new span representing just the end-point of this span",0,null],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",0,null],[11,"contains","","",0,null],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",0,null],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"encode","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"new","","",19,{"inputs":[],"output":{"name":"multispan"}}],[11,"from_span","","",19,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from_spans","","",19,{"inputs":[{"name":"vec"}],"output":{"name":"multispan"}}],[11,"push_span_label","","",19,null],[11,"primary_span","","Selects the first primary span (if any)",19,null],[11,"primary_spans","","Returns all primary spans.",19,null],[11,"replace","","Replaces all occurances of one Span with another. Used to move Spans in areas that don&#39;t\ndisplay well (like std macros). Returns true if replacements occurred.",19,null],[11,"span_labels","","Returns the strings to highlight. We always ensure that there\nis an entry for each of the primary spans -- for each primary\nspan P, if there is at least one label with span P, we return\nthose labels (marked as primary). But otherwise we return\n`SpanLabel` instances with empty labels.",19,null],[11,"from","","",19,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,null],[11,"hash","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"from_u32","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"expnid"}}],[11,"into_u32","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,null],[11,"clone","","",3,null],[11,"encode","","",4,null],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",4,null],[11,"next_line","","EFFECT: register a start-of-line offset in the\ntable of line-beginnings.\nUNCHECKED INVARIANT: these offsets must be added in the right\norder and must be in the right places; there is shared knowledge\nabout what ends a line between this file and parse.rs\nWARNING: pos param here is the offset relative to start of CodeMap,\nand CodeMap will append a newline when adding a filemap without a newline at the end,\nso the safe way to call this is with value calculated as\nfilemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",4,null],[11,"get_line","","get a line from the list of pre-computed line-beginnings.\nline-number here is 0-based.",4,null],[11,"record_multibyte_char","","",4,null],[11,"is_real_file","","",4,null],[11,"is_imported","","",4,null],[11,"count_lines","","",4,null],[11,"lookup_line","","Find the line containing the given position. The return value is the\nindex into the `lines` array of this FileMap, not the 1-based line\nnumber. If the filemap is empty or the position is located before the\nfirst line, None is returned.",4,null],[11,"line_bounds","","",4,null],[11,"fmt","","",5,null],[11,"cmp","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"hash","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",6,null],[11,"cmp","","",6,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"gt","","",6,null],[11,"ge","","",6,null],[11,"hash","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"from_usize","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",5,null],[11,"add","","",5,null],[11,"sub","","",5,null],[11,"encode","","",5,null],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_usize","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",6,null],[11,"add","","",6,null],[11,"sub","","",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",9,null],[11,"fmt","","",10,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"clone","","",16,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null]],"paths":[[3,"Span"],[3,"SpanLabel"],[3,"ExpnId"],[3,"MultiByteChar"],[3,"FileMap"],[3,"BytePos"],[3,"CharPos"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"LineInfo"],[3,"FileLines"],[3,"MacroBacktrace"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[8,"Pos"],[3,"MultiSpan"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",4,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",5,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"fmt","","",3,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",7,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",8,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"fmt","","",6,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,null],[11,"fmt","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"eq","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"fmt","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",10,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"fmt","","",12,null],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,null],[11,"fmt","","",11,null],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",17,null],[11,"emit_nil","","",17,null],[11,"emit_usize","","",17,null],[11,"emit_u64","","",17,null],[11,"emit_u32","","",17,null],[11,"emit_u16","","",17,null],[11,"emit_u8","","",17,null],[11,"emit_isize","","",17,null],[11,"emit_i64","","",17,null],[11,"emit_i32","","",17,null],[11,"emit_i16","","",17,null],[11,"emit_i8","","",17,null],[11,"emit_bool","","",17,null],[11,"emit_f64","","",17,null],[11,"emit_f32","","",17,null],[11,"emit_char","","",17,null],[11,"emit_str","","",17,null],[11,"emit_enum","","",17,null],[11,"emit_enum_variant","","",17,null],[11,"emit_enum_variant_arg","","",17,null],[11,"emit_enum_struct_variant","","",17,null],[11,"emit_enum_struct_variant_field","","",17,null],[11,"emit_struct","","",17,null],[11,"emit_struct_field","","",17,null],[11,"emit_tuple","","",17,null],[11,"emit_tuple_arg","","",17,null],[11,"emit_tuple_struct","","",17,null],[11,"emit_tuple_struct_arg","","",17,null],[11,"emit_option","","",17,null],[11,"emit_option_none","","",17,null],[11,"emit_option_some","","",17,null],[11,"emit_seq","","",17,null],[11,"emit_seq_elt","","",17,null],[11,"emit_map","","",17,null],[11,"emit_map_elt_key","","",17,null],[11,"emit_map_elt_val","","",17,null],[11,"encode","","",9,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",9,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",9,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",9,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",9,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",9,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",9,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",9,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",9,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",9,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",9,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",9,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",15,null],[11,"clone","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,null],[11,"is_empty","","Returns true if the stack is empty.",18,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",18,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,null],[11,"next","","",19,null],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",19,null],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,null],[11,"read_usize","","",21,null],[11,"read_u8","","",21,null],[11,"read_u16","","",21,null],[11,"read_u32","","",21,null],[11,"read_u64","","",21,null],[11,"read_isize","","",21,null],[11,"read_i8","","",21,null],[11,"read_i16","","",21,null],[11,"read_i32","","",21,null],[11,"read_i64","","",21,null],[11,"read_f32","","",21,null],[11,"read_f64","","",21,null],[11,"read_bool","","",21,null],[11,"read_char","","",21,null],[11,"read_str","","",21,null],[11,"read_enum","","",21,null],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,null],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,null],[11,"read_struct","","",21,null],[11,"read_struct_field","","",21,null],[11,"read_tuple","","",21,null],[11,"read_tuple_arg","","",21,null],[11,"read_tuple_struct","","",21,null],[11,"read_tuple_struct_arg","","",21,null],[11,"read_option","","",21,null],[11,"read_seq","","",21,null],[11,"read_seq_elt","","",21,null],[11,"read_map","","",21,null],[11,"read_map_elt_key","","",21,null],[11,"read_map_elt_val","","",21,null],[11,"error","","",21,null],[11,"to_json","","",9,null],[11,"fmt","","Encodes a json value into a string",9,null],[11,"fmt","","Encodes a json value into a string",22,null],[11,"fmt","","Encodes a json value into a string",23,null],[11,"indent","","Set the indentation level for the emitted JSON",24,null],[11,"fmt","","Encodes a json value into a string",24,null],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",25,null],[10,"read_nil","","",25,null],[10,"read_usize","","",25,null],[10,"read_u64","","",25,null],[10,"read_u32","","",25,null],[10,"read_u16","","",25,null],[10,"read_u8","","",25,null],[10,"read_isize","","",25,null],[10,"read_i64","","",25,null],[10,"read_i32","","",25,null],[10,"read_i16","","",25,null],[10,"read_i8","","",25,null],[10,"read_bool","","",25,null],[10,"read_f64","","",25,null],[10,"read_f32","","",25,null],[10,"read_char","","",25,null],[10,"read_str","","",25,null],[10,"read_enum","","",25,null],[10,"read_enum_variant","","",25,null],[10,"read_enum_variant_arg","","",25,null],[10,"read_enum_struct_variant","","",25,null],[10,"read_enum_struct_variant_field","","",25,null],[10,"read_struct","","",25,null],[10,"read_struct_field","","",25,null],[10,"read_tuple","","",25,null],[10,"read_tuple_arg","","",25,null],[10,"read_tuple_struct","","",25,null],[10,"read_tuple_struct_arg","","",25,null],[10,"read_option","","",25,null],[10,"read_seq","","",25,null],[10,"read_seq_elt","","",25,null],[10,"read_map","","",25,null],[10,"read_map_elt_key","","",25,null],[10,"read_map_elt_val","","",25,null],[10,"error","","",25,null],[8,"Encoder","","",null,null],[16,"Error","","",26,null],[10,"emit_nil","","",26,null],[10,"emit_usize","","",26,null],[10,"emit_u64","","",26,null],[10,"emit_u32","","",26,null],[10,"emit_u16","","",26,null],[10,"emit_u8","","",26,null],[10,"emit_isize","","",26,null],[10,"emit_i64","","",26,null],[10,"emit_i32","","",26,null],[10,"emit_i16","","",26,null],[10,"emit_i8","","",26,null],[10,"emit_bool","","",26,null],[10,"emit_f64","","",26,null],[10,"emit_f32","","",26,null],[10,"emit_char","","",26,null],[10,"emit_str","","",26,null],[10,"emit_enum","","",26,null],[10,"emit_enum_variant","","",26,null],[10,"emit_enum_variant_arg","","",26,null],[10,"emit_enum_struct_variant","","",26,null],[10,"emit_enum_struct_variant_field","","",26,null],[10,"emit_struct","","",26,null],[10,"emit_struct_field","","",26,null],[10,"emit_tuple","","",26,null],[10,"emit_tuple_arg","","",26,null],[10,"emit_tuple_struct","","",26,null],[10,"emit_tuple_struct_arg","","",26,null],[10,"emit_option","","",26,null],[10,"emit_option_none","","",26,null],[10,"emit_option_some","","",26,null],[10,"emit_seq","","",26,null],[10,"emit_seq_elt","","",26,null],[10,"emit_map","","",26,null],[10,"emit_map_elt_key","","",26,null],[10,"emit_map_elt_val","","",26,null],[8,"Decodable","","",null,null],[10,"decode","","",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",28,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",29,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",15,null],[12,"sa_family","","",15,null],[12,"sa_data","","",15,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",16,null],[12,"sin6_family","","",16,null],[12,"sin6_port","","",16,null],[12,"sin6_flowinfo","","",16,null],[12,"sin6_addr","","",16,null],[12,"sin6_scope_id","","",16,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",17,null],[12,"sun_family","","",17,null],[12,"sun_path","","",17,null],[3,"passwd","","",null,null],[12,"pw_name","","",18,null],[12,"pw_passwd","","",18,null],[12,"pw_uid","","",18,null],[12,"pw_gid","","",18,null],[12,"pw_change","","",18,null],[12,"pw_class","","",18,null],[12,"pw_gecos","","",18,null],[12,"pw_dir","","",18,null],[12,"pw_shell","","",18,null],[12,"pw_expire","","",18,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",19,null],[12,"ifa_name","","",19,null],[12,"ifa_flags","","",19,null],[12,"ifa_addr","","",19,null],[12,"ifa_netmask","","",19,null],[12,"ifa_dstaddr","","",19,null],[12,"ifa_data","","",19,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",20,null],[12,"tm_min","","",20,null],[12,"tm_hour","","",20,null],[12,"tm_mday","","",20,null],[12,"tm_mon","","",20,null],[12,"tm_year","","",20,null],[12,"tm_wday","","",20,null],[12,"tm_yday","","",20,null],[12,"tm_isdst","","",20,null],[12,"tm_gmtoff","","",20,null],[12,"tm_zone","","",20,null],[3,"utsname","","",null,null],[12,"sysname","","",21,null],[12,"nodename","","",21,null],[12,"release","","",21,null],[12,"version","","",21,null],[12,"machine","","",21,null],[3,"msghdr","","",null,null],[12,"msg_name","","",22,null],[12,"msg_namelen","","",22,null],[12,"msg_iov","","",22,null],[12,"msg_iovlen","","",22,null],[12,"msg_control","","",22,null],[12,"msg_controllen","","",22,null],[12,"msg_flags","","",22,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",23,null],[12,"if_name","","",23,null],[3,"utmpx","","",null,null],[12,"ut_user","","",24,null],[12,"ut_id","","",24,null],[12,"ut_line","","",24,null],[12,"ut_pid","","",24,null],[12,"ut_type","","",24,null],[12,"ut_tv","","",24,null],[12,"ut_host","","",24,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",25,null],[12,"gl_offs","","",25,null],[12,"gl_pathv","","",25,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",26,null],[12,"ss_family","","",26,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",27,null],[12,"ai_family","","",27,null],[12,"ai_socktype","","",27,null],[12,"ai_protocol","","",27,null],[12,"ai_addrlen","","",27,null],[12,"ai_canonname","","",27,null],[12,"ai_addr","","",27,null],[12,"ai_next","","",27,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",28,null],[12,"denom","","",28,null],[3,"stat","","",null,null],[12,"st_dev","","",29,null],[12,"st_mode","","",29,null],[12,"st_nlink","","",29,null],[12,"st_ino","","",29,null],[12,"st_uid","","",29,null],[12,"st_gid","","",29,null],[12,"st_rdev","","",29,null],[12,"st_atime","","",29,null],[12,"st_atime_nsec","","",29,null],[12,"st_mtime","","",29,null],[12,"st_mtime_nsec","","",29,null],[12,"st_ctime","","",29,null],[12,"st_ctime_nsec","","",29,null],[12,"st_birthtime","","",29,null],[12,"st_birthtime_nsec","","",29,null],[12,"st_size","","",29,null],[12,"st_blocks","","",29,null],[12,"st_blksize","","",29,null],[12,"st_flags","","",29,null],[12,"st_gen","","",29,null],[12,"st_lspare","","",29,null],[12,"st_qspare","","",29,null],[3,"dirent","","",null,null],[12,"d_ino","","",30,null],[12,"d_seekoff","","",30,null],[12,"d_reclen","","",30,null],[12,"d_namlen","","",30,null],[12,"d_type","","",30,null],[12,"d_name","","",30,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",31,null],[12,"si_errno","","",31,null],[12,"si_code","","",31,null],[12,"si_pid","","",31,null],[12,"si_uid","","",31,null],[12,"si_status","","",31,null],[12,"si_addr","","",31,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",32,null],[12,"sa_mask","","",32,null],[12,"sa_flags","","",32,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",33,null],[12,"ss_size","","",33,null],[12,"ss_flags","","",33,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",34,null],[12,"fst_posmode","","",34,null],[12,"fst_offset","","",34,null],[12,"fst_length","","",34,null],[12,"fst_bytesalloc","","",34,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",35,null],[12,"ra_count","","",35,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",36,null],[12,"f_frsize","","",36,null],[12,"f_blocks","","",36,null],[12,"f_bfree","","",36,null],[12,"f_bavail","","",36,null],[12,"f_files","","",36,null],[12,"f_ffree","","",36,null],[12,"f_favail","","",36,null],[12,"f_fsid","","",36,null],[12,"f_flag","","",36,null],[12,"f_namemax","","",36,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",37,null],[12,"dli_fbase","","",37,null],[12,"dli_sname","","",37,null],[12,"dli_saddr","","",37,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",38,null],[12,"sin_family","","",38,null],[12,"sin_port","","",38,null],[12,"sin_addr","","",38,null],[12,"sin_zero","","",38,null],[3,"statfs","","",null,null],[12,"f_bsize","","",39,null],[12,"f_iosize","","",39,null],[12,"f_blocks","","",39,null],[12,"f_bfree","","",39,null],[12,"f_bavail","","",39,null],[12,"f_files","","",39,null],[12,"f_ffree","","",39,null],[12,"f_fsid","","",39,null],[12,"f_owner","","",39,null],[12,"f_type","","",39,null],[12,"f_flags","","",39,null],[12,"f_fssubtype","","",39,null],[12,"f_fstypename","","",39,null],[12,"f_mntonname","","",39,null],[12,"f_mntfromname","","",39,null],[12,"f_reserved","","",39,null],[3,"kevent","","",null,null],[12,"ident","","",40,null],[12,"filter","","",40,null],[12,"flags","","",40,null],[12,"fflags","","",40,null],[12,"data","","",40,null],[12,"udata","","",40,null],[3,"kevent64_s","","",null,null],[12,"ident","","",41,null],[12,"filter","","",41,null],[12,"flags","","",41,null],[12,"fflags","","",41,null],[12,"data","","",41,null],[12,"udata","","",41,null],[12,"ext","","",41,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",42,null],[12,"dqb_bsoftlimit","","",42,null],[12,"dqb_curbytes","","",42,null],[12,"dqb_ihardlimit","","",42,null],[12,"dqb_isoftlimit","","",42,null],[12,"dqb_curinodes","","",42,null],[12,"dqb_btime","","",42,null],[12,"dqb_itime","","",42,null],[12,"dqb_id","","",42,null],[12,"dqb_spare","","",42,null],[3,"termios","","",null,null],[12,"c_iflag","","",43,null],[12,"c_oflag","","",43,null],[12,"c_cflag","","",43,null],[12,"c_lflag","","",43,null],[12,"c_cc","","",43,null],[12,"c_ispeed","","",43,null],[12,"c_ospeed","","",43,null],[3,"flock","","",null,null],[12,"l_start","","",44,null],[12,"l_len","","",44,null],[12,"l_pid","","",44,null],[12,"l_type","","",44,null],[12,"l_whence","","",44,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",45,null],[12,"hdr_cnt","","",45,null],[12,"trailers","","",45,null],[12,"trl_cnt","","",45,null],[3,"lconv","","",null,null],[12,"decimal_point","","",46,null],[12,"thousands_sep","","",46,null],[12,"grouping","","",46,null],[12,"int_curr_symbol","","",46,null],[12,"currency_symbol","","",46,null],[12,"mon_decimal_point","","",46,null],[12,"mon_thousands_sep","","",46,null],[12,"mon_grouping","","",46,null],[12,"positive_sign","","",46,null],[12,"negative_sign","","",46,null],[12,"int_frac_digits","","",46,null],[12,"frac_digits","","",46,null],[12,"p_cs_precedes","","",46,null],[12,"p_sep_by_space","","",46,null],[12,"n_cs_precedes","","",46,null],[12,"n_sep_by_space","","",46,null],[12,"p_sign_posn","","",46,null],[12,"n_sign_posn","","",46,null],[12,"int_p_cs_precedes","","",46,null],[12,"int_n_cs_precedes","","",46,null],[12,"int_p_sep_by_space","","",46,null],[12,"int_n_sep_by_space","","",46,null],[12,"int_p_sign_posn","","",46,null],[12,"int_n_sign_posn","","",46,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"lutimes","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"utmpxname","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[11,"clone","","",47,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",53,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",54,null],[11,"clone","","",23,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"sem_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"NCCS","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"_UTX_USERSIZE","","",null,null],[17,"_UTX_LINESIZE","","",null,null],[17,"_UTX_IDSIZE","","",null,null],[17,"_UTX_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SIGNATURE","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_DETAIL","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_EXIT_DETAIL_MASK","","",null,null],[17,"NOTE_EXIT_DECRYPTFAIL","","",null,null],[17,"NOTE_EXIT_MEMORY","","",null,null],[17,"NOTE_EXIT_CSERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_LEEWAY","","",null,null],[17,"NOTE_CRITICAL","","",null,null],[17,"NOTE_BACKGROUND","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"LOG_NETINFO","","",null,null],[17,"LOG_REMOTEAUTH","","",null,null],[17,"LOG_INSTALL","","",null,null],[17,"LOG_RAS","","",null,null],[17,"LOG_LAUNCHD","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_QUAD","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_NOLOCK","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_MASKED","","",null,null],[17,"CTLFLAG_NOAUTO","","",null,null],[17,"CTLFLAG_KERN","","",null,null],[17,"CTLFLAG_LOCKED","","",null,null],[17,"CTLFLAG_OID2","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_MAXID","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_DOMAINNAME","","",null,null],[17,"KERN_MAXPARTITIONS","","",null,null],[17,"KERN_KDEBUG","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK32","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_SYMFILE","","",null,null],[17,"KERN_PROCARGS","","",null,null],[17,"KERN_NETBOOT","","",null,null],[17,"KERN_SYSV","","",null,null],[17,"KERN_AFFINITY","","",null,null],[17,"KERN_TRANSLATE","","",null,null],[17,"KERN_CLASSIC","","",null,null],[17,"KERN_EXEC","","",null,null],[17,"KERN_CLASSICHANDLER","","",null,null],[17,"KERN_AIOMAX","","",null,null],[17,"KERN_AIOPROCMAX","","",null,null],[17,"KERN_AIOTHREADS","","",null,null],[17,"KERN_COREFILE","","",null,null],[17,"KERN_COREDUMP","","",null,null],[17,"KERN_SUGID_COREDUMP","","",null,null],[17,"KERN_PROCDELAYTERM","","",null,null],[17,"KERN_SHREG_PRIVATIZABLE","","",null,null],[17,"KERN_LOW_PRI_WINDOW","","",null,null],[17,"KERN_LOW_PRI_DELAY","","",null,null],[17,"KERN_POSIX","","",null,null],[17,"KERN_USRSTACK64","","",null,null],[17,"KERN_NX_PROTECTION","","",null,null],[17,"KERN_TFP","","",null,null],[17,"KERN_PROCNAME","","",null,null],[17,"KERN_THALTSTACK","","",null,null],[17,"KERN_SPECULATIVE_READS","","",null,null],[17,"KERN_OSVERSION","","",null,null],[17,"KERN_SAFEBOOT","","",null,null],[17,"KERN_RAGEVNODE","","",null,null],[17,"KERN_TTY","","",null,null],[17,"KERN_CHECKOPENEVT","","",null,null],[17,"KERN_THREADNAME","","",null,null],[17,"KERN_MAXID","","",null,null],[17,"KERN_RAGE_PROC","","",null,null],[17,"KERN_RAGE_THREAD","","",null,null],[17,"KERN_UNRAGE_PROC","","",null,null],[17,"KERN_UNRAGE_THREAD","","",null,null],[17,"KERN_OPENEVT_PROC","","",null,null],[17,"KERN_UNOPENEVT_PROC","","",null,null],[17,"KERN_TFP_POLICY","","",null,null],[17,"KERN_TFP_POLICY_DENY","","",null,null],[17,"KERN_TFP_POLICY_DEFAULT","","",null,null],[17,"KERN_KDEFLAGS","","",null,null],[17,"KERN_KDDFLAGS","","",null,null],[17,"KERN_KDENABLE","","",null,null],[17,"KERN_KDSETBUF","","",null,null],[17,"KERN_KDGETBUF","","",null,null],[17,"KERN_KDSETUP","","",null,null],[17,"KERN_KDREMOVE","","",null,null],[17,"KERN_KDSETREG","","",null,null],[17,"KERN_KDGETREG","","",null,null],[17,"KERN_KDREADTR","","",null,null],[17,"KERN_KDPIDTR","","",null,null],[17,"KERN_KDTHRMAP","","",null,null],[17,"KERN_KDPIDEX","","",null,null],[17,"KERN_KDSETRTCDEC","","",null,null],[17,"KERN_KDGETENTROPY","","",null,null],[17,"KERN_KDWRITETR","","",null,null],[17,"KERN_KDWRITEMAP","","",null,null],[17,"KERN_KDENABLE_BG_TRACE","","",null,null],[17,"KERN_KDDISABLE_BG_TRACE","","",null,null],[17,"KERN_KDREADCURTHRMAP","","",null,null],[17,"KERN_KDSET_TYPEFILTER","","",null,null],[17,"KERN_KDBUFWAIT","","",null,null],[17,"KERN_KDCPUMAP","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_LCID","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"KIPC_MBSTAT","","",null,null],[17,"KIPC_NMBCLUSTERS","","",null,null],[17,"KIPC_SOQLIMITCOMPAT","","",null,null],[17,"VM_METER","","",null,null],[17,"VM_LOADAVG","","",null,null],[17,"VM_MACHFACTOR","","",null,null],[17,"VM_SWAPUSAGE","","",null,null],[17,"VM_MAXID","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_EPOCH","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_VECTORUNIT","","",null,null],[17,"HW_BUS_FREQ","","",null,null],[17,"HW_CPU_FREQ","","",null,null],[17,"HW_CACHELINE","","",null,null],[17,"HW_L1ICACHESIZE","","",null,null],[17,"HW_L1DCACHESIZE","","",null,null],[17,"HW_L2SETTINGS","","",null,null],[17,"HW_L2CACHESIZE","","",null,null],[17,"HW_L3SETTINGS","","",null,null],[17,"HW_L3CACHESIZE","","",null,null],[17,"HW_TB_FREQ","","",null,null],[17,"HW_MEMSIZE","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"HW_MAXID","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"USER_MAXID","","",null,null],[17,"CTL_DEBUG_NAME","","",null,null],[17,"CTL_DEBUG_VALUE","","",null,null],[17,"CTL_DEBUG_MAXID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"PRIO_DARWIN_THREAD","","",null,null],[17,"PRIO_DARWIN_PROCESS","","",null,null],[17,"PRIO_DARWIN_BG","","",null,null],[17,"PRIO_DARWIN_NONUI","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_CONDATTR_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"if_nameindex"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["term"] = {"doc":"Terminal formatting library.","items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[4,"Error","","An error arising from interacting with the terminal.",null,null],[13,"Io","","Indicates an error from any underlying IO",1,null],[13,"TerminfoParsing","","Indicates an error during terminfo parsing",1,null],[13,"ParameterizedExpansion","","Indicates an error expanding a parameterized string from the terminfo database",1,null],[13,"NotSupported","","Indicates that the terminal does not support the requested operation.",1,null],[13,"TermUnset","","Indicates that the `TERM` environment variable was unset, and thus we were unable to detect\nwhich terminal we should be using.",1,null],[13,"TerminfoEntryNotFound","","Indicates that we were unable to find a terminfo entry for the requested terminal.",1,null],[13,"CursorDestinationInvalid","","Indicates that the cursor could not be moved to the requested position.",1,null],[13,"ColorOutOfRange","","Indicates that the terminal does not support displaying the requested color.",1,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn&#39;t be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn&#39;t be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",2,null],[12,"bools","","Map of capability name to boolean value",2,null],[12,"numbers","","Map of capability name to numeric value",2,null],[12,"strings","","Map of capability name to raw (unexpanded) string",2,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its\nparsed Terminfo database record.",null,null],[4,"Error","","An error from parsing a terminfo entry",null,null],[13,"BadMagic","","The &quot;magic&quot; number at the start of the file was wrong.",3,null],[13,"NotUtf8","","The names in the file were not valid UTF-8.",3,null],[13,"ShortNames","","The names section of the file was empty",3,null],[13,"TooManyBools","","More boolean parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyNumbers","","More number parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyStrings","","More string parameters are present in the file than this crate knows how to interpret.",3,null],[13,"InvalidLength","","The length of some field was not &gt;= -1.",3,null],[13,"NamesMissingNull","","The names table was missing a trailing null terminator.",3,null],[13,"StringsMissingNull","","The strings table was missing a trailing null terminator.",3,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"parser","term::terminfo","TermInfo format parsing.\nncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames`\nis true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"name":"result"}}],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals",null,{"inputs":[],"output":{"name":"terminfo"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Words","","",4,null],[13,"Number","","",4,null],[4,"Error","","An error from interpreting a parameterized string.",null,null],[13,"StackUnderflow","","Data was requested from the stack, but the stack didn&#39;t have enough elements.",5,null],[13,"TypeMismatch","","The type of the element(s) on top of the stack did not match the type that the operator\nwanted.",5,null],[13,"UnrecognizedFormatOption","","An unrecognized format option was used.",5,null],[13,"InvalidVariableName","","An invalid variable name was used.",5,null],[13,"InvalidParameterIndex","","An invalid parameter index was used.",5,null],[13,"MalformedCharacterConstant","","A malformed character constant was used.",5,null],[13,"IntegerConstantOverflow","","An integer constant was too large (overflowed an i32)",5,null],[13,"MalformedIntegerConstant","","A malformed integer constant was used.",5,null],[13,"FormatWidthOverflow","","A format width constant was too large (overflowed a usize)",5,null],[13,"FormatPrecisionOverflow","","A format precision constant was too large (overflowed a usize)",5,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",4,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"new","","Return a new zero-initialized Variables",6,{"inputs":[],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",2,null],[11,"from_env","","Create a TermInfo based on current environment.",2,{"inputs":[],"output":{"name":"result"}}],[11,"from_name","","Create a TermInfo for the named terminal.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_path","","Parse the given TermInfo.",2,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"from","","",3,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"description","","",3,null],[11,"cause","","",3,null],[11,"fg","","",7,null],[11,"bg","","",7,null],[11,"attr","","",7,null],[11,"supports_attr","","",7,null],[11,"reset","","",7,null],[11,"supports_reset","","",7,null],[11,"supports_color","","",7,null],[11,"cursor_up","","",7,null],[11,"delete_line","","",7,null],[11,"carriage_return","","",7,null],[11,"get_ref","","",7,null],[11,"get_mut","","",7,null],[11,"into_inner","","",7,null],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",7,{"inputs":[{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",7,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"write","","",7,null],[11,"flush","","",7,null],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[6,"Result","","The canonical `Result` type using this crate&#39;s Error type.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal\n(foreground/background colors etc).",null,null],[16,"Output","","The terminal&#39;s output writer type.",8,null],[10,"fg","","Sets the foreground color to the given color.",8,null],[10,"bg","","Sets the background color to the given color.",8,null],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(())` if the attribute is\nsupported and was sent to the terminal, or `Err(e)` if there was an error or the attribute\nwasn&#39;t supported.",8,null],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",8,null],[10,"reset","","Resets all terminal attributes and colors to their defaults.",8,null],[10,"supports_reset","","Returns true if reset is supported.",8,null],[10,"supports_color","","Returns true if color is fully supported.",8,null],[10,"cursor_up","","Moves the cursor up one line.",8,null],[10,"delete_line","","Deletes the text from the cursor location to the end of the line.",8,null],[10,"carriage_return","","Moves the cursor to the left edge of the current line.",8,null],[10,"get_ref","","Gets an immutable reference to the stream inside",8,null],[10,"get_mut","","Gets a mutable reference to the stream inside",8,null],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",8,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}]],"paths":[[4,"Attr"],[4,"Error"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[4,"Error"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to\n[Unicode Standard Annex #31](http://www.unicode.org/reports/tr31/) rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-derived-property is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the &#39;XID_Start&#39;\nUnicode property.",0,null],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the &#39;XID_Continue&#39;\nUnicode property.",0,null]],"paths":[[8,"UnicodeXID"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
